name: Build and Test c_binder_mojo
on:
  schedule:
    - cron: '1 6 * * 5'
  workflow_dispatch: #allows you to trigger manually
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for relevant changes
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "Scheduled or manual run - building images"
        elif git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "(c_binder_mojo\.Dockerfile|pixi\.(toml|lock)|docker-compose\.yml)" > /dev/null; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "Docker/pixi files changed - building images"
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "No relevant changes - skipping image build"
        fi

  build:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: ${{ matrix.runner.RUNNER_NAME }}
    strategy:
      max-parallel: 4
      matrix:
        runner:
          - RUNNER_NAME: ubuntu-24.04-arm
            PLATFORM: arm64
          - RUNNER_NAME: ubuntu-latest
            PLATFORM: x86_64
        build_type: [gpu, cpu]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build, tag, and push image
      run: |
        export DOCKER_BUILDKIT=1
        export COMPOSE_PROFILES=build_${BUILD_TYPE}_${PLATFORM}
        echo ${PASSWORD} | docker login -u $USERNAME --password-stdin

        if docker compose pull; then
            echo "Docker Compose pull succeeded."
        else
            echo "Docker Compose pull failed."
        fi
        
        export VERSION=latest
        docker compose build
        docker compose push
        export VERSION=$(date +%F)
        docker compose build
        docker compose push
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        BUILD_TYPE: ${{ matrix.build_type }}
        PLATFORM: ${{ matrix.runner.PLATFORM }}

  test:
    needs: [check-changes, build]
    if: always() && (needs.build.result == 'success' || needs.check-changes.outputs.should-build == 'false')
    runs-on: ${{ matrix.runner.RUNNER_NAME }}
    strategy:
      max-parallel: 2
      matrix:
        runner:
          - RUNNER_NAME: ubuntu-24.04-arm
            PLATFORM: arm64
          - RUNNER_NAME: ubuntu-latest
            PLATFORM: x86_64
        build_type: [cpu]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Modular repository
      uses: actions/cache@v4
      with:
        path: modular
        key: modular-repo-${{ matrix.runner.PLATFORM }}-${{ matrix.build_type }}-${{ hashFiles('pixi.toml', 'pixi.lock') }}-${{ github.sha }}
        restore-keys: |
          modular-repo-${{ matrix.runner.PLATFORM }}-${{ matrix.build_type }}-${{ hashFiles('pixi.toml', 'pixi.lock') }}-
          modular-repo-${{ matrix.runner.PLATFORM }}-${{ matrix.build_type }}-
          modular-repo-${{ matrix.runner.PLATFORM }}-
          modular-repo-

    - name: Fix workspace permissions
      run: |
        sudo chown -R 1000:1000 .

    - name: Pull docker image and run tests
      run: |
        export DOCKER_BUILDKIT=1
        export COMPOSE_PROFILES=${BUILD_TYPE}_${PLATFORM}
        echo ${PASSWORD} | docker login -u $USERNAME --password-stdin

        if docker compose pull; then
            echo "Docker Compose pull succeeded."
        else
            echo "Docker Compose pull failed."
        fi
        # Testing the package command
        docker compose run --rm c_binder_mojo_${COMPOSE_PROFILES} bash -l -c "pixi run package"
        # Testing the test_all_stdlib_clean command
        docker compose run --rm c_binder_mojo_${COMPOSE_PROFILES} bash -l -c "pixi run test_all_stdlib_clean"
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        BUILD_TYPE: ${{ matrix.build_type }}
        PLATFORM: ${{ matrix.runner.PLATFORM }} 