# Native Mojo Modules
from memory import ArcPointer
# Third Party Mojo Modules
# First Party Modules
from c_binder_mojo.common import TokenBundles
from c_binder_mojo.mojo_ast_nodes.nodes import AstNode
from c_binder_mojo import c_ast_nodes


struct MojoTokens:
    alias COMMENT_SINGLE_LINE_BEGIN = "#"
    

fn node2string(name:String,token_bundles:TokenBundles, just_code:Bool) -> String:
    var s:String = ""
    if not just_code:
        s += name + " " + String(token_bundles)
    else:
        s += String(token_bundles)
    return s


trait NodeAstLike(CollectionElement, Stringable): 
    alias __name__: String
    
    # State checks
    fn is_accepting_tokens(self, c_ast_node: c_ast_nodes.nodes.AstNode, nodes: ArcPointer[List[AstNode]]) -> Bool: ...
    fn is_complete(self, c_ast_node: c_ast_nodes.nodes.AstNode, nodes: ArcPointer[List[AstNode]]) -> Bool: ...
    fn wants_child(self, c_ast_node: c_ast_nodes.nodes.AstNode, nodes: ArcPointer[List[AstNode]]) -> Bool: ...
    
    # Actions
    fn append(mut self, c_ast_node: c_ast_nodes.nodes.AstNode) -> Bool: ...
    fn add_child(mut self, child_idx: Int): ...
    fn parent_idx(self) -> Int: ...
    fn current_idx(self) -> Int: ...
    fn set_current_idx(mut self, value:Int): ...
    fn children_idxs(mut self) -> ArcPointer[List[Int]]: ...
    fn display_name(self) -> String: ...
    fn token_bundles(self) -> TokenBundles: ...
    fn should_children_inline(self) -> Bool: ...
    fn str_just_code(mut self) -> Bool: ...
    fn set_str_just_code(mut self, str_just_code: Bool): ...

    
    # Node creation
    @staticmethod
    fn accept(c_ast_node: c_ast_nodes.nodes.AstNode, parent_idx: Int, nodes: ArcPointer[List[AstNode]]) -> Bool: ...
    @staticmethod
    fn create(c_ast_node: c_ast_nodes.nodes.AstNode, parent_idx: Int, nodes: ArcPointer[List[AstNode]]) -> Self: ...