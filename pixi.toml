[project]
authors = ["Josiah Laivins <jklaivins@gmail.com>"]
channels = [
    "https://conda.modular.com/max-nightly", 
    "https://repo.prefix.dev/modular-community", 
    "conda-forge"
]
name = "c_binder_mojo"
platforms = ["linux-64", "linux-aarch64"]
version = "0.1.0"
license = "Apache-2.0"
license-file = "LICENSE"
homepage = "https://github.com/josiahls/c_binder_mojo"
repository = "https://github.com/josiahls/c_binder_mojo"

[environments]
stdlib-dev = {features = ["stdlib-dev"]}

[dependencies]
mojo = ">=25.6.0.dev2025080116,<25.6.0.dev2025081216"
pre-commit = ">=4.2.0,<5"

[activation.env]
LD_LIBRARY_PATH="$PIXI_PROJECT_ROOT/tests/test_c_project/build:$LD_LIBRARY_PATH"
GEM_HOME="$HOME/.local/share/gem"
PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$HOME/.local/share/gem/bin:${PATH}"

[tasks]
######################## Test C Project Configuration #########################
init_test_c_project = { cmd = [
    "cd", "tests/test_c_project", "&&",
    "mkdir", "-p", "build", "&&",
    "cd", "build", "&&",
    "cmake", ".."
], outputs = ["tests/test_c_project/build"]}

build_test_c_project = { cmd = [
    "cd", "tests/test_c_project/build", "&&",
    "make",
], depends-on = [
    "init_test_c_project"
]}

########################### Firehose Configuration ############################
clone_firehose = { cmd = [
    "bash", "-c", 
    "if [ ! -d firehose ]; then git clone https://github.com/josiahls/firehose.git; else echo 'Firehose directory already exists.'; fi"
]}

########################### EmberJson Configuration ############################
clone_emberjson = { cmd = [
    "bash", "-c", 
    "if [ ! -d EmberJson ]; then git clone https://github.com/josiahls/EmberJson.git; else echo 'EmberJson directory already exists.'; fi"
]}

######################### Pre-commit Configuration ##########################
install_pre_commit_hooks = { cmd = [
    "pre-commit", "install"
], outputs = [".git/hooks/pre-commit"]}

######################### Documentation Configuration ##########################

build_jekyll = { cmd = [
    "gem", "install", "jekyll", "bundler", "--user"
]}

build_blank_docs = { cmd = [
    "bash", "-c",
    "if [ ! -d docs ]; then pixi run jekyll new docs --blank; else echo 'docs directory already exists.'; fi"
], depends-on = [ 
    "build_jekyll" 
]}

build_gems = { cmd = [
    "cd", "docs", "&&", "bundle"
], depends-on = [ "build_blank_docs" ]}

build_mojo_docs_json = { cmd = [
    "mkdir", "-p", "docs/.jekyll-cache", "&&",
    "pixi", "run", "mojo", "doc", "-o", "docs/.jekyll-cache/c_binder_docs.json", "c_binder_mojo", "-I", "firehose", "-I", "EmberJson"
]}

build_mojo_docs = { cmd = [
    "pixi", "run", "mojo", "run", "-I", "firehose", "-I", "EmberJson", "docs_entrypoint.mojo"
], depends-on = [ "build_mojo_docs_json" ]}

build_docs = { cmd = [
    "echo", "Built docs!"
], depends-on = [ "build_blank_docs", "build_gems", "build_mojo_docs" ]}


######################### Core API ############################################
# NOTE: If we want to use the stdlib, we need to run the update_stdlib during configure to make dev work convenient.
# pixi supports overriding the default task, but then the user gets prompted on which task they are to run every time.
configure = { cmd = [
    "bash", "-c", 
    "echo 'configuring' && if [ \"$PIXI_ENVIRONMENT_NAME\" = \"stdlib-dev\" ]; then echo 'Running in stdlib-dev environment, updating stdlib...'; pixi run update_stdlib; fi"
], depends-on = [ "clone_firehose", "clone_emberjson", "build_test_c_project", "install_pre_commit_hooks" ] }

generate_bindings = { cmd = [
    "mojo", "run", "-I", ".", "-I", "firehose", "-I", "EmberJson", "entrypoint.mojo"
], depends-on = [ "configure" ]}

package = { cmd = [
    "mojo", "package", "-I", "firehose", "-I", "EmberJson", "c_binder_mojo"
], depends-on = [ "configure" ]}

format = { cmd = [
    "mojo", "format", "c_binder_mojo"
]}

docs = { cmd = [
    "cd", "docs", "&&", "bundle", "exec", "jekyll", "serve", "--livereload"
], depends-on = [ "build_docs" ]}


######################### Testing Configuration ###############################
# Build the c bindings.
build_test_c_project_base = { cmd = [
    "pixi", "run", "generate_bindings", 
    "--output_dir", "tests/test_c_project/build",
    "--input_header_path"
]}

build_test_c_project_bindings_simple_type_defs = { cmd = [
    "pixi", "run", "build_test_c_project_base", "tests/test_c_project/include/simple_type_defs.h"
]}

build_test_c_project_bindings_complex_structs = { cmd = [
    "pixi", "run", "build_test_c_project_base", "tests/test_c_project/include/complex_structs.h"
]}

build_test_c_project_bindings_complex_unions = { cmd = [
    "pixi", "run", "build_test_c_project_base", "tests/test_c_project/include/complex_unions.h"
]}

build_test_c_project_bindings_complex_type_defs = { cmd = [
    "pixi", "run", "build_test_c_project_base", "tests/test_c_project/include/complex_type_defs.h"
]}

build_test_c_project_bindings = { depends-on = [ 
    "configure", 
    "build_test_c_project_bindings_simple_type_defs",
    "build_test_c_project_bindings_complex_structs",
    "build_test_c_project_bindings_complex_unions",
]}

test = { cmd = [
    "pixi", "run", "mojo", "run", "-I", "tests/test_c_project/build", "-I", ".", "-I", "firehose", "-I", "EmberJson"
]}

test_test_stdlib_ext = { cmd = [
    "pixi", "run", "test", "tests/test_stdlib_ext.mojo"
], depends-on = [  ]}

test_test_typing = { cmd = [
    "pixi", "run", "test", "tests/test_typing.mojo"
], depends-on = [  ]}

test_all = { depends-on = [ 
    "package",
    "build_test_c_project_bindings",
    "test_test_stdlib_ext",
    "test_test_typing",
]}

[feature.stdlib-dev.activation.env]
MODULAR_MOJO_MAX_IMPORT_PATH="$PIXI_PROJECT_ROOT/modular/bazel-bin"
# MOJO_ENABLE_STACK_TRACE_ON_ERROR="1"

[feature.stdlib-dev.tasks]
########################## Mojo Standard Library ##############################
clone_stdlib = { cmd = [
    "bash", "-c", 
    "if [ ! -d modular ]; then git clone https://github.com/max-lang/modular.git; else echo 'Modular directory already exists.'; fi"
]}

update_stdlib = { cmd = [
    "cd", "modular", "&&",
    "./bazelw", "build", "//mojo/stdlib/stdlib"
], depends-on = [ "clone_stdlib" ]}

clean_update_stdlib = { cmd = [
    "cd", "modular", "&&",
    "git", "fetch", "origin", "&&",
    # TODO: This commit is right before the change to Copyable to require a is trivial flag. Entire stdlib is broken from this.
    "git", "reset", "--hard", "574193db643a36d279a6751530f0f54e4203f617", "&&",
    "./bazelw", "build", "//mojo/stdlib/..."
], depends-on = [ "clone_stdlib" ]}

