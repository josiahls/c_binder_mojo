RootNode(children=19)
PlaceHolderNode()
PlaceHolderNode(// Copyright 2021 DeepMind Technologies Limited )
PlaceHolderNode(// )
PlaceHolderNode(// Licensed under the Apache License ,  Version 2.0 (the "License") ;  )
PlaceHolderNode(// you may not use this file except in compliance with the License. )
PlaceHolderNode(// You may obtain a copy of the License at )
PlaceHolderNode(// )
PlaceHolderNode(//     http://www.apache.org/licenses/LICENSE-2.0 )
PlaceHolderNode(// )
PlaceHolderNode(// Unless required by applicable law or agreed to in writing ,  software )
PlaceHolderNode(// distributed under the License is distributed on an "AS IS" BASIS ,  )
PlaceHolderNode(// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND ,  either express or implied. )
PlaceHolderNode(// See the License for the specific language governing permissions and )
PlaceHolderNode(// limitations under the License. )
PlaceHolderNode( )
PlaceHolderNode(#ifndef MUJOCO_MJMODEL_H_ )
PlaceHolderNode(#define MUJOCO_MJMODEL_H_ 
 )
PlaceHolderNode(#include <stddef.h> )
PlaceHolderNode(#include <stdint.h> )
PlaceHolderNode( 
 )
PlaceHolderNode(#include <mujoco/mjtnum.h> )
PlaceHolderNode( )
PlaceHolderNode(// global constants )
PlaceHolderNode(#define mjPI            3.14159265358979323846 )
PlaceHolderNode(#define mjMAXVAL        1E+10     )
PlaceHolderNode(// maximum value in qpos ,  qvel ,  qacc )
PlaceHolderNode(#define mjMINMU         1E-5      )
PlaceHolderNode(// minimum friction coefficient )
PlaceHolderNode(#define mjMINIMP        0.0001    )
PlaceHolderNode(// minimum constraint impedance )
PlaceHolderNode(#define mjMAXIMP        0.9999    )
PlaceHolderNode(// maximum constraint impedance )
PlaceHolderNode(#define mjMAXCONPAIR    50        )
PlaceHolderNode(// maximum number of contacts per geom pair )
PlaceHolderNode(#define mjMAXTREEDEPTH  50        )
PlaceHolderNode(// maximum bounding volume hierarchy depth )
PlaceHolderNode( 
 )
PlaceHolderNode(//---------------------------------- sizes --------------------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(#define mjNEQDATA       11        )
PlaceHolderNode(// number of eq_data fields )
PlaceHolderNode(#define mjNDYN          10        )
PlaceHolderNode(// number of actuator dynamics parameters )
PlaceHolderNode(#define mjNGAIN         10        )
PlaceHolderNode(// number of actuator gain parameters )
PlaceHolderNode(#define mjNBIAS         10        )
PlaceHolderNode(// number of actuator bias parameters )
PlaceHolderNode(#define mjNFLUID        12        )
PlaceHolderNode(// number of fluid interaction parameters )
PlaceHolderNode(#define mjNREF          2         )
PlaceHolderNode(// number of solver reference parameters )
PlaceHolderNode(#define mjNIMP          5         )
PlaceHolderNode(// number of solver impedance parameters )
PlaceHolderNode(#define mjNSOLVER       200       )
PlaceHolderNode(// size of one mjData.solver array )
PlaceHolderNode(#define mjNISLAND       20        )
PlaceHolderNode(// number of mjData.solver arrays )
PlaceHolderNode( )
PlaceHolderNode(//---------------------------------- enum types (mjt) ---------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> 
mjtDisableBit ; )
PlaceHolderNode(enum mjtDisableBit_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(    )
PlaceHolderNode(// disable default feature bitflags )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_CONSTRAINT   = 1<<0 , )
PlaceHolderNode(     )
PlaceHolderNode(// entire constraint solver )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_EQUALITY     = 1<<1 , )
PlaceHolderNode(     )
PlaceHolderNode(// equality constraints )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_FRICTIONLOSS = 1<<2 , )
PlaceHolderNode(     )
PlaceHolderNode(// joint and tendon frictionloss constraints )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_LIMIT        = 1<<3 , )
PlaceHolderNode(     )
PlaceHolderNode(// joint and tendon limit constraints )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_CONTACT      = 1<<4 , )
PlaceHolderNode(     )
PlaceHolderNode(// contact constraints )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_PASSIVE      = 1<<5 , )
PlaceHolderNode(     )
PlaceHolderNode(// passive forces )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_GRAVITY      = 1<<6 , )
PlaceHolderNode(     )
PlaceHolderNode(// gravitational forces )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_CLAMPCTRL    = 1<<7 , )
PlaceHolderNode(     )
PlaceHolderNode(// clamp control to specified range )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_WARMSTART    = 1<<8 , )
PlaceHolderNode(     )
PlaceHolderNode(// warmstart constraint solver )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_FILTERPARENT = 1<<9 , )
PlaceHolderNode(     )
PlaceHolderNode(// remove collisions with parent body )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_ACTUATION    = 1<<10 , )
PlaceHolderNode(    )
PlaceHolderNode(// apply actuation forces )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_REFSAFE      = 1<<11 , )
PlaceHolderNode(    )
PlaceHolderNode(// integrator safety: make ref[0]>=2*timestep )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_SENSOR       = 1<<12 , )
PlaceHolderNode(    )
PlaceHolderNode(// sensors )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_MIDPHASE     = 1<<13 , )
PlaceHolderNode(    )
PlaceHolderNode(// mid-phase collision filtering )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_EULERDAMP    = 1<<14 , )
PlaceHolderNode(    )
PlaceHolderNode(// implicit integration of joint damping in Euler integrator )
PlaceHolderNode(  )
PlaceHolderNode(mjDSBL_AUTORESET    = 1<<15 , )
PlaceHolderNode(    )
PlaceHolderNode(// automatic reset when numerical issues are detected )
PlaceHolderNode( 
  )
PlaceHolderNode(mjNDISABLE          = 16 )
PlaceHolderNode(       )
PlaceHolderNode(// number of disable flags )
PlaceHolderNode(mjtDisableBit )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtEnableBit ; )
PlaceHolderNode(enum mjtEnableBit_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(     )
PlaceHolderNode(// enable optional feature bitflags )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_OVERRIDE     = 1<<0 , )
PlaceHolderNode(     )
PlaceHolderNode(// override contact parameters )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_ENERGY       = 1<<1 , )
PlaceHolderNode(     )
PlaceHolderNode(// energy computation )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_FWDINV       = 1<<2 , )
PlaceHolderNode(     )
PlaceHolderNode(// record solver statistics )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_INVDISCRETE  = 1<<3 , )
PlaceHolderNode(     )
PlaceHolderNode(// discrete-time inverse dynamics )
PlaceHolderNode(                                  )
PlaceHolderNode(// experimental features: )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_MULTICCD     = 1<<4 , )
PlaceHolderNode(     )
PlaceHolderNode(// multi-point convex collision detection )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_ISLAND       = 1<<5 , )
PlaceHolderNode(     )
PlaceHolderNode(// constraint island discovery )
PlaceHolderNode(  )
PlaceHolderNode(mjENBL_NATIVECCD    = 1<<6 , )
PlaceHolderNode(     )
PlaceHolderNode(// native convex collision detection )
PlaceHolderNode( 
  )
PlaceHolderNode(mjNENABLE           = 7 )
PlaceHolderNode(        )
PlaceHolderNode(// number of enable flags )
PlaceHolderNode(mjtEnableBit )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtJoint ; )
PlaceHolderNode(enum mjtJoint_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(         )
PlaceHolderNode(// type of degree of freedom )
PlaceHolderNode(  )
PlaceHolderNode(mjJNT_FREE          = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// global position and orientation (quat)       (7) )
PlaceHolderNode(  )
PlaceHolderNode(mjJNT_BALL , )
PlaceHolderNode(                     )
PlaceHolderNode(// orientation (quat) relative to parent        (4) )
PlaceHolderNode(  )
PlaceHolderNode(mjJNT_SLIDE , )
PlaceHolderNode(                    )
PlaceHolderNode(// sliding distance along body-fixed axis       (1) )
PlaceHolderNode(  )
PlaceHolderNode(mjJNT_HINGE                     )
PlaceHolderNode(// rotation angle (rad) around body-fixed axis  (1) )
PlaceHolderNode(mjtJoint )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtGeom ; )
PlaceHolderNode(enum mjtGeom_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(          )
PlaceHolderNode(// type of geometric shape )
PlaceHolderNode(  )
PlaceHolderNode(// regular geom types )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_PLANE        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// plane )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_HFIELD , )
PlaceHolderNode(                  )
PlaceHolderNode(// height field )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_SPHERE , )
PlaceHolderNode(                  )
PlaceHolderNode(// sphere )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_CAPSULE , )
PlaceHolderNode(                 )
PlaceHolderNode(// capsule )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_ELLIPSOID , )
PlaceHolderNode(               )
PlaceHolderNode(// ellipsoid )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_CYLINDER , )
PlaceHolderNode(                )
PlaceHolderNode(// cylinder )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_BOX , )
PlaceHolderNode(                     )
PlaceHolderNode(// box )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_MESH , )
PlaceHolderNode(                    )
PlaceHolderNode(// mesh )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_SDF , )
PlaceHolderNode(                     )
PlaceHolderNode(// signed distance field )
PlaceHolderNode( 
  )
PlaceHolderNode(mjNGEOMTYPES , )
PlaceHolderNode(                   )
PlaceHolderNode(// number of regular geom types )
PlaceHolderNode( 
  )
PlaceHolderNode(// rendering-only geom types: not used in mjModel ,  not counted in mjNGEOMTYPES )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_ARROW        = 100 , )
PlaceHolderNode(      )
PlaceHolderNode(// arrow )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_ARROW1 , )
PlaceHolderNode(                  )
PlaceHolderNode(// arrow without wedges )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_ARROW2 , )
PlaceHolderNode(                  )
PlaceHolderNode(// arrow in both directions )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_LINE , )
PlaceHolderNode(                    )
PlaceHolderNode(// line )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_LINEBOX , )
PlaceHolderNode(                 )
PlaceHolderNode(// box with line edges )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_FLEX , )
PlaceHolderNode(                    )
PlaceHolderNode(// flex )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_SKIN , )
PlaceHolderNode(                    )
PlaceHolderNode(// skin )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_LABEL , )
PlaceHolderNode(                   )
PlaceHolderNode(// text label )
PlaceHolderNode(  )
PlaceHolderNode(mjGEOM_TRIANGLE , )
PlaceHolderNode(                )
PlaceHolderNode(// triangle )
PlaceHolderNode( 
  )
PlaceHolderNode(mjGEOM_NONE         = 1001 )
PlaceHolderNode(     )
PlaceHolderNode(// missing geom type )
PlaceHolderNode(mjtGeom )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtCamLight ; )
PlaceHolderNode(enum mjtCamLight_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(      )
PlaceHolderNode(// tracking mode for camera and light )
PlaceHolderNode(  )
PlaceHolderNode(mjCAMLIGHT_FIXED    = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// pos and rot fixed in body )
PlaceHolderNode(  )
PlaceHolderNode(mjCAMLIGHT_TRACK , )
PlaceHolderNode(               )
PlaceHolderNode(// pos tracks body ,  rot fixed in global )
PlaceHolderNode(  )
PlaceHolderNode(mjCAMLIGHT_TRACKCOM , )
PlaceHolderNode(            )
PlaceHolderNode(// pos tracks subtree com ,  rot fixed in body )
PlaceHolderNode(  )
PlaceHolderNode(mjCAMLIGHT_TARGETBODY , )
PlaceHolderNode(          )
PlaceHolderNode(// pos fixed in body ,  rot tracks target body )
PlaceHolderNode(  )
PlaceHolderNode(mjCAMLIGHT_TARGETBODYCOM        )
PlaceHolderNode(// pos fixed in body ,  rot tracks target subtree com )
PlaceHolderNode(mjtCamLight )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtTexture ; )
PlaceHolderNode(enum mjtTexture_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(       )
PlaceHolderNode(// type of texture )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXTURE_2D        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// 2d texture ,  suitable for planes and hfields )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXTURE_CUBE , )
PlaceHolderNode(                 )
PlaceHolderNode(// cube texture ,  suitable for all other geom types )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXTURE_SKYBOX                )
PlaceHolderNode(// cube texture used as skybox )
PlaceHolderNode(mjtTexture )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtIntegrator ; )
PlaceHolderNode(enum mjtTextureRole_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(   )
PlaceHolderNode(// role of texture map in rendering )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_USER      = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// unspecified )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_RGB , )
PlaceHolderNode(                  )
PlaceHolderNode(// base color (albedo) )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_OCCLUSION , )
PlaceHolderNode(            )
PlaceHolderNode(// ambient occlusion )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_ROUGHNESS , )
PlaceHolderNode(            )
PlaceHolderNode(// roughness )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_METALLIC , )
PlaceHolderNode(             )
PlaceHolderNode(// metallic )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_NORMAL , )
PlaceHolderNode(               )
PlaceHolderNode(// normal (bump) map )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_OPACITY , )
PlaceHolderNode(              )
PlaceHolderNode(// transperancy )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_EMISSIVE , )
PlaceHolderNode(             )
PlaceHolderNode(// light emission )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_RGBA , )
PlaceHolderNode(                 )
PlaceHolderNode(// base color ,  opacity )
PlaceHolderNode(  )
PlaceHolderNode(mjTEXROLE_ORM , )
PlaceHolderNode(                  )
PlaceHolderNode(// occlusion ,  roughness ,  metallic )
PlaceHolderNode(  )
PlaceHolderNode(mjNTEXROLE 
} mjtTextureRole ;  
 
 
typedef enum mjtIntegrator_ {     )
PlaceHolderNode(// integrator mode )
PlaceHolderNode(  )
PlaceHolderNode(mjINT_EULER         = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// semi-implicit Euler )
PlaceHolderNode(  )
PlaceHolderNode(mjINT_RK4 , )
PlaceHolderNode(                      )
PlaceHolderNode(// 4th-order Runge Kutta )
PlaceHolderNode(  )
PlaceHolderNode(mjINT_IMPLICIT , )
PlaceHolderNode(                 )
PlaceHolderNode(// implicit in velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjINT_IMPLICITFAST              )
PlaceHolderNode(// implicit in velocity ,  no rne derivative )
PlaceHolderNode(mjtIntegrator )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtCone ; )
PlaceHolderNode(enum mjtCone_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(          )
PlaceHolderNode(// type of friction cone )
PlaceHolderNode(  )
PlaceHolderNode(mjCONE_PYRAMIDAL     = 0 , )
PlaceHolderNode(       )
PlaceHolderNode(// pyramidal )
PlaceHolderNode(  )
PlaceHolderNode(mjCONE_ELLIPTIC                 )
PlaceHolderNode(// elliptic )
PlaceHolderNode(mjtCone )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtJacobian ; )
PlaceHolderNode(enum mjtJacobian_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(      )
PlaceHolderNode(// type of constraint Jacobian )
PlaceHolderNode(  )
PlaceHolderNode(mjJAC_DENSE          = 0 , )
PlaceHolderNode(       )
PlaceHolderNode(// dense )
PlaceHolderNode(  )
PlaceHolderNode(mjJAC_SPARSE , )
PlaceHolderNode(                   )
PlaceHolderNode(// sparse )
PlaceHolderNode(  )
PlaceHolderNode(mjJAC_AUTO                      )
PlaceHolderNode(// dense if nv<60 ,  sparse otherwise )
PlaceHolderNode(mjtJacobian )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtSolver ; )
PlaceHolderNode(enum mjtSolver_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(        )
PlaceHolderNode(// constraint solver algorithm )
PlaceHolderNode(  )
PlaceHolderNode(mjSOL_PGS            = 0 , )
PlaceHolderNode(       )
PlaceHolderNode(// PGS    (dual) )
PlaceHolderNode(  )
PlaceHolderNode(mjSOL_CG , )
PlaceHolderNode(                       )
PlaceHolderNode(// CG     (primal) )
PlaceHolderNode(  )
PlaceHolderNode(mjSOL_NEWTON                    )
PlaceHolderNode(// Newton (primal) )
PlaceHolderNode(mjtSolver )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtEq ; )
PlaceHolderNode(enum mjtEq_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(            )
PlaceHolderNode(// type of equality constraint )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_CONNECT        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// connect two bodies at a point (ball joint) )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_WELD , )
PlaceHolderNode(                      )
PlaceHolderNode(// fix relative position and orientation of two bodies )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_JOINT , )
PlaceHolderNode(                     )
PlaceHolderNode(// couple the values of two scalar joints with cubic )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_TENDON , )
PlaceHolderNode(                    )
PlaceHolderNode(// couple the lengths of two tendons with cubic )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_FLEX , )
PlaceHolderNode(                      )
PlaceHolderNode(// fix all edge lengths of a flex )
PlaceHolderNode(  )
PlaceHolderNode(mjEQ_DISTANCE                   )
PlaceHolderNode(// unsupported ,  will cause an error if used )
PlaceHolderNode(mjtEq )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtWrap ; )
PlaceHolderNode(enum mjtWrap_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(          )
PlaceHolderNode(// type of tendon wrap object )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_NONE         = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// null object )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_JOINT , )
PlaceHolderNode(                   )
PlaceHolderNode(// constant moment arm )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_PULLEY , )
PlaceHolderNode(                  )
PlaceHolderNode(// pulley used to split tendon )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_SITE , )
PlaceHolderNode(                    )
PlaceHolderNode(// pass through site )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_SPHERE , )
PlaceHolderNode(                  )
PlaceHolderNode(// wrap around sphere )
PlaceHolderNode(  )
PlaceHolderNode(mjWRAP_CYLINDER                 )
PlaceHolderNode(// wrap around (infinite) cylinder )
PlaceHolderNode(mjtWrap )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtTrn ; )
PlaceHolderNode(enum mjtTrn_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(           )
PlaceHolderNode(// type of actuator transmission )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_JOINT         = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// force on joint )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_JOINTINPARENT , )
PlaceHolderNode(            )
PlaceHolderNode(// force on joint ,  expressed in parent frame )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_SLIDERCRANK , )
PlaceHolderNode(              )
PlaceHolderNode(// force via slider-crank linkage )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_TENDON , )
PlaceHolderNode(                   )
PlaceHolderNode(// force on tendon )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_SITE , )
PlaceHolderNode(                     )
PlaceHolderNode(// force on site )
PlaceHolderNode(  )
PlaceHolderNode(mjTRN_BODY , )
PlaceHolderNode(                     )
PlaceHolderNode(// adhesion force on a body's geoms )
PlaceHolderNode( 
  )
PlaceHolderNode(mjTRN_UNDEFINED     = 1000 )
PlaceHolderNode(     )
PlaceHolderNode(// undefined transmission type )
PlaceHolderNode(mjtTrn )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtDyn ; )
PlaceHolderNode(enum mjtDyn_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(           )
PlaceHolderNode(// type of actuator dynamics )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_NONE          = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// no internal dynamics ;  ctrl specifies force )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_INTEGRATOR , )
PlaceHolderNode(               )
PlaceHolderNode(// integrator: da/dt = u )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_FILTER , )
PlaceHolderNode(                   )
PlaceHolderNode(// linear filter: da/dt = (u-a) / tau )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_FILTEREXACT , )
PlaceHolderNode(              )
PlaceHolderNode(// linear filter: da/dt = (u-a) / tau ,  with exact integration )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_MUSCLE , )
PlaceHolderNode(                   )
PlaceHolderNode(// piece-wise linear filter with two time constants )
PlaceHolderNode(  )
PlaceHolderNode(mjDYN_USER                      )
PlaceHolderNode(// user-defined dynamics type )
PlaceHolderNode(mjtDyn )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtGain ; )
PlaceHolderNode(enum mjtGain_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(          )
PlaceHolderNode(// type of actuator gain )
PlaceHolderNode(  )
PlaceHolderNode(mjGAIN_FIXED        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// fixed gain )
PlaceHolderNode(  )
PlaceHolderNode(mjGAIN_AFFINE , )
PlaceHolderNode(                  )
PlaceHolderNode(// const + kp*length + kv*velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjGAIN_MUSCLE , )
PlaceHolderNode(                  )
PlaceHolderNode(// muscle FLV curve computed by mju_muscleGain() )
PlaceHolderNode(  )
PlaceHolderNode(mjGAIN_USER                     )
PlaceHolderNode(// user-defined gain type )
PlaceHolderNode(mjtGain )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtBias ; )
PlaceHolderNode(enum mjtBias_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(          )
PlaceHolderNode(// type of actuator bias )
PlaceHolderNode(  )
PlaceHolderNode(mjBIAS_NONE         = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// no bias )
PlaceHolderNode(  )
PlaceHolderNode(mjBIAS_AFFINE , )
PlaceHolderNode(                  )
PlaceHolderNode(// const + kp*length + kv*velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjBIAS_MUSCLE , )
PlaceHolderNode(                  )
PlaceHolderNode(// muscle passive force computed by mju_muscleBias() )
PlaceHolderNode(  )
PlaceHolderNode(mjBIAS_USER                     )
PlaceHolderNode(// user-defined bias type )
PlaceHolderNode(mjtBias )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtObj ; )
PlaceHolderNode(enum mjtObj_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(           )
PlaceHolderNode(// type of MujoCo object )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_UNKNOWN       = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// unknown object type )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_BODY , )
PlaceHolderNode(                     )
PlaceHolderNode(// body )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_XBODY , )
PlaceHolderNode(                    )
PlaceHolderNode(// body ,  used to access regular frame instead of i-frame )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_JOINT , )
PlaceHolderNode(                    )
PlaceHolderNode(// joint )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_DOF , )
PlaceHolderNode(                      )
PlaceHolderNode(// dof )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_GEOM , )
PlaceHolderNode(                     )
PlaceHolderNode(// geom )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_SITE , )
PlaceHolderNode(                     )
PlaceHolderNode(// site )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_CAMERA , )
PlaceHolderNode(                   )
PlaceHolderNode(// camera )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_LIGHT , )
PlaceHolderNode(                    )
PlaceHolderNode(// light )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_FLEX , )
PlaceHolderNode(                     )
PlaceHolderNode(// flex )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_MESH , )
PlaceHolderNode(                     )
PlaceHolderNode(// mesh )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_SKIN , )
PlaceHolderNode(                     )
PlaceHolderNode(// skin )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_HFIELD , )
PlaceHolderNode(                   )
PlaceHolderNode(// heightfield )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_TEXTURE , )
PlaceHolderNode(                  )
PlaceHolderNode(// texture )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_MATERIAL , )
PlaceHolderNode(                 )
PlaceHolderNode(// material for rendering )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_PAIR , )
PlaceHolderNode(                     )
PlaceHolderNode(// geom pair to include )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_EXCLUDE , )
PlaceHolderNode(                  )
PlaceHolderNode(// body pair to exclude )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_EQUALITY , )
PlaceHolderNode(                 )
PlaceHolderNode(// equality constraint )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_TENDON , )
PlaceHolderNode(                   )
PlaceHolderNode(// tendon )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_ACTUATOR , )
PlaceHolderNode(                 )
PlaceHolderNode(// actuator )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_SENSOR , )
PlaceHolderNode(                   )
PlaceHolderNode(// sensor )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_NUMERIC , )
PlaceHolderNode(                  )
PlaceHolderNode(// numeric )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_TEXT , )
PlaceHolderNode(                     )
PlaceHolderNode(// text )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_TUPLE , )
PlaceHolderNode(                    )
PlaceHolderNode(// tuple )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_KEY , )
PlaceHolderNode(                      )
PlaceHolderNode(// keyframe )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_PLUGIN , )
PlaceHolderNode(                   )
PlaceHolderNode(// plugin instance )
PlaceHolderNode( 
  )
PlaceHolderNode(mjNOBJECT , )
PlaceHolderNode(                      )
PlaceHolderNode(// number of object types )
PlaceHolderNode( 
  )
PlaceHolderNode(// meta elements ,  do not appear in mjModel )
PlaceHolderNode(  )
PlaceHolderNode(mjOBJ_FRAME         = 100 )
PlaceHolderNode(      )
PlaceHolderNode(// frame )
PlaceHolderNode(mjtObj )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtConstraint ; )
PlaceHolderNode(enum mjtConstraint_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(    )
PlaceHolderNode(// type of constraint )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_EQUALITY    = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// equality constraint )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_FRICTION_DOF , )
PlaceHolderNode(           )
PlaceHolderNode(// dof friction )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_FRICTION_TENDON , )
PlaceHolderNode(        )
PlaceHolderNode(// tendon friction )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_LIMIT_JOINT , )
PlaceHolderNode(            )
PlaceHolderNode(// joint limit )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_LIMIT_TENDON , )
PlaceHolderNode(           )
PlaceHolderNode(// tendon limit )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_CONTACT_FRICTIONLESS , )
PlaceHolderNode(   )
PlaceHolderNode(// frictionless contact )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_CONTACT_PYRAMIDAL , )
PlaceHolderNode(      )
PlaceHolderNode(// frictional contact ,  pyramidal friction cone )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTR_CONTACT_ELLIPTIC        )
PlaceHolderNode(// frictional contact ,  elliptic friction cone )
PlaceHolderNode(mjtConstraint )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtConstraintState ; )
PlaceHolderNode(enum mjtConstraintState_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode( )
PlaceHolderNode(// constraint state )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTRSTATE_SATISFIED = 0 , )
PlaceHolderNode(       )
PlaceHolderNode(// constraint satisfied ,  zero cost (limit ,  contact) )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTRSTATE_QUADRATIC , )
PlaceHolderNode(           )
PlaceHolderNode(// quadratic cost (equality ,  friction ,  limit ,  contact) )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTRSTATE_LINEARNEG , )
PlaceHolderNode(           )
PlaceHolderNode(// linear cost ,  negative side (friction) )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTRSTATE_LINEARPOS , )
PlaceHolderNode(           )
PlaceHolderNode(// linear cost ,  positive side (friction) )
PlaceHolderNode(  )
PlaceHolderNode(mjCNSTRSTATE_CONE                 )
PlaceHolderNode(// squared distance to cone cost (elliptic contact) )
PlaceHolderNode(mjtConstraintState )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtSensor ; )
PlaceHolderNode(enum mjtSensor_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(        )
PlaceHolderNode(// type of sensor )
PlaceHolderNode(  )
PlaceHolderNode(// common robotic sensors ,  attached to a site )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TOUCH        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// scalar contact normal forces summed over sensor zone )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_ACCELEROMETER , )
PlaceHolderNode(           )
PlaceHolderNode(// 3D linear acceleration ,  in local frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_VELOCIMETER , )
PlaceHolderNode(             )
PlaceHolderNode(// 3D linear velocity ,  in local frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_GYRO , )
PlaceHolderNode(                    )
PlaceHolderNode(// 3D angular velocity ,  in local frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FORCE , )
PlaceHolderNode(                   )
PlaceHolderNode(// 3D force between site's body and its parent body )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TORQUE , )
PlaceHolderNode(                  )
PlaceHolderNode(// 3D torque between site's body and its parent body )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_MAGNETOMETER , )
PlaceHolderNode(            )
PlaceHolderNode(// 3D magnetometer )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_RANGEFINDER , )
PlaceHolderNode(             )
PlaceHolderNode(// scalar distance to nearest geom or site along z-axis )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_CAMPROJECTION , )
PlaceHolderNode(           )
PlaceHolderNode(// pixel coordinates of a site in the camera image )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors related to scalar joints ,  tendons ,  actuators )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTPOS , )
PlaceHolderNode(                )
PlaceHolderNode(// scalar joint position (hinge and slide only) )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTVEL , )
PlaceHolderNode(                )
PlaceHolderNode(// scalar joint velocity (hinge and slide only) )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TENDONPOS , )
PlaceHolderNode(               )
PlaceHolderNode(// scalar tendon position )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TENDONVEL , )
PlaceHolderNode(               )
PlaceHolderNode(// scalar tendon velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_ACTUATORPOS , )
PlaceHolderNode(             )
PlaceHolderNode(// scalar actuator position )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_ACTUATORVEL , )
PlaceHolderNode(             )
PlaceHolderNode(// scalar actuator velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_ACTUATORFRC , )
PlaceHolderNode(             )
PlaceHolderNode(// scalar actuator force )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTACTFRC , )
PlaceHolderNode(             )
PlaceHolderNode(// scalar actuator force ,  measured at the joint )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors related to ball joints )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_BALLQUAT , )
PlaceHolderNode(                )
PlaceHolderNode(// 4D ball joint quaternion )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_BALLANGVEL , )
PlaceHolderNode(              )
PlaceHolderNode(// 3D ball joint angular velocity )
PlaceHolderNode( 
  )
PlaceHolderNode(// joint and tendon limit sensors ,  in constraint space )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTLIMITPOS , )
PlaceHolderNode(           )
PlaceHolderNode(// joint limit distance-margin )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTLIMITVEL , )
PlaceHolderNode(           )
PlaceHolderNode(// joint limit velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_JOINTLIMITFRC , )
PlaceHolderNode(           )
PlaceHolderNode(// joint limit force )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TENDONLIMITPOS , )
PlaceHolderNode(          )
PlaceHolderNode(// tendon limit distance-margin )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TENDONLIMITVEL , )
PlaceHolderNode(          )
PlaceHolderNode(// tendon limit velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_TENDONLIMITFRC , )
PlaceHolderNode(          )
PlaceHolderNode(// tendon limit force )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors attached to an object with spatial frame: (x)body ,  geom ,  site ,  camera )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEPOS , )
PlaceHolderNode(                )
PlaceHolderNode(// 3D position )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEQUAT , )
PlaceHolderNode(               )
PlaceHolderNode(// 4D unit quaternion orientation )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEXAXIS , )
PlaceHolderNode(              )
PlaceHolderNode(// 3D unit vector: x-axis of object's frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEYAXIS , )
PlaceHolderNode(              )
PlaceHolderNode(// 3D unit vector: y-axis of object's frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEZAXIS , )
PlaceHolderNode(              )
PlaceHolderNode(// 3D unit vector: z-axis of object's frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMELINVEL , )
PlaceHolderNode(             )
PlaceHolderNode(// 3D linear velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEANGVEL , )
PlaceHolderNode(             )
PlaceHolderNode(// 3D angular velocity )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMELINACC , )
PlaceHolderNode(             )
PlaceHolderNode(// 3D linear acceleration )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_FRAMEANGACC , )
PlaceHolderNode(             )
PlaceHolderNode(// 3D angular acceleration )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors related to kinematic subtrees ;  attached to a body (which is the subtree root) )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_SUBTREECOM , )
PlaceHolderNode(              )
PlaceHolderNode(// 3D center of mass of subtree )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_SUBTREELINVEL , )
PlaceHolderNode(           )
PlaceHolderNode(// 3D linear velocity of subtree )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_SUBTREEANGMOM , )
PlaceHolderNode(           )
PlaceHolderNode(// 3D angular momentum of subtree )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors for geometric distance ;  attached to geoms or bodies )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_GEOMDIST , )
PlaceHolderNode(                )
PlaceHolderNode(// signed distance between two geoms )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_GEOMNORMAL , )
PlaceHolderNode(              )
PlaceHolderNode(// normal direction between two geoms )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_GEOMFROMTO , )
PlaceHolderNode(              )
PlaceHolderNode(// segment between two geoms )
PlaceHolderNode( 
  )
PlaceHolderNode(// global sensors )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_CLOCK , )
PlaceHolderNode(                   )
PlaceHolderNode(// simulation time )
PlaceHolderNode( 
  )
PlaceHolderNode(// plugin-controlled sensors )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_PLUGIN , )
PlaceHolderNode(                  )
PlaceHolderNode(// plugin-controlled )
PlaceHolderNode( 
  )
PlaceHolderNode(// user-defined sensor )
PlaceHolderNode(  )
PlaceHolderNode(mjSENS_USER                     )
PlaceHolderNode(// sensor data provided by mjcb_sensor callback )
PlaceHolderNode(mjtSensor )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtStage ; )
PlaceHolderNode(enum mjtStage_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(         )
PlaceHolderNode(// computation stage )
PlaceHolderNode(  )
PlaceHolderNode(mjSTAGE_NONE        = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// no computations )
PlaceHolderNode(  )
PlaceHolderNode(mjSTAGE_POS , )
PlaceHolderNode(                    )
PlaceHolderNode(// position-dependent computations )
PlaceHolderNode(  )
PlaceHolderNode(mjSTAGE_VEL , )
PlaceHolderNode(                    )
PlaceHolderNode(// velocity-dependent computations )
PlaceHolderNode(  )
PlaceHolderNode(mjSTAGE_ACC                     )
PlaceHolderNode(// acceleration/force-dependent computations )
PlaceHolderNode(mjtStage )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtDataType ; )
PlaceHolderNode(enum mjtDataType_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(      )
PlaceHolderNode(// data type for sensors )
PlaceHolderNode(  )
PlaceHolderNode(mjDATATYPE_REAL     = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// real values ,  no constraints )
PlaceHolderNode(  )
PlaceHolderNode(mjDATATYPE_POSITIVE , )
PlaceHolderNode(            )
PlaceHolderNode(// positive values ;  0 or negative: inactive )
PlaceHolderNode(  )
PlaceHolderNode(mjDATATYPE_AXIS , )
PlaceHolderNode(                )
PlaceHolderNode(// 3D unit vector )
PlaceHolderNode(  )
PlaceHolderNode(mjDATATYPE_QUATERNION           )
PlaceHolderNode(// unit quaternion )
PlaceHolderNode(mjtDataType )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtSameFrame ; )
PlaceHolderNode(enum mjtSameFrame_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(     )
PlaceHolderNode(// frame alignment of bodies with their children )
PlaceHolderNode(  )
PlaceHolderNode(mjSAMEFRAME_NONE    = 0 , )
PlaceHolderNode(        )
PlaceHolderNode(// no alignment )
PlaceHolderNode(  )
PlaceHolderNode(mjSAMEFRAME_BODY , )
PlaceHolderNode(               )
PlaceHolderNode(// frame is same as body frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSAMEFRAME_INERTIA , )
PlaceHolderNode(            )
PlaceHolderNode(// frame is same as inertial frame )
PlaceHolderNode(  )
PlaceHolderNode(mjSAMEFRAME_BODYROT , )
PlaceHolderNode(            )
PlaceHolderNode(// frame orientation is same as body orientation )
PlaceHolderNode(  )
PlaceHolderNode(mjSAMEFRAME_INERTIAROT          )
PlaceHolderNode(// frame orientation is same as inertia orientation )
PlaceHolderNode(mjtSameFrame )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtLRMode ; )
PlaceHolderNode(enum mjtLRMode_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(        )
PlaceHolderNode(// mode for actuator length range computation )
PlaceHolderNode(  )
PlaceHolderNode(mjLRMODE_NONE   = 0 , )
PlaceHolderNode(            )
PlaceHolderNode(// do not process any actuators )
PlaceHolderNode(  )
PlaceHolderNode(mjLRMODE_MUSCLE , )
PlaceHolderNode(                )
PlaceHolderNode(// process muscle actuators )
PlaceHolderNode(  )
PlaceHolderNode(mjLRMODE_MUSCLEUSER , )
PlaceHolderNode(            )
PlaceHolderNode(// process muscle and user actuators )
PlaceHolderNode(  )
PlaceHolderNode(mjLRMODE_ALL                    )
PlaceHolderNode(// process all actuators )
PlaceHolderNode(mjtLRMode )
PlaceHolderNode( 
 
 )
PlaceHolderNode(typedef <children> 
mjtFlexSelf ; )
PlaceHolderNode(enum mjtFlexSelf_ )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(      )
PlaceHolderNode(// mode for flex selfcollide )
PlaceHolderNode(  )
PlaceHolderNode(mjFLEXSELF_NONE   = 0 , )
PlaceHolderNode(          )
PlaceHolderNode(// no self-collisions )
PlaceHolderNode(  )
PlaceHolderNode(mjFLEXSELF_NARROW , )
PlaceHolderNode(              )
PlaceHolderNode(// skip midphase ,  go directly to narrowphase )
PlaceHolderNode(  )
PlaceHolderNode(mjFLEXSELF_BVH , )
PlaceHolderNode(                 )
PlaceHolderNode(// use BVH in midphase (if midphase enabled) )
PlaceHolderNode(  )
PlaceHolderNode(mjFLEXSELF_SAP , )
PlaceHolderNode(                 )
PlaceHolderNode(// use SAP in midphase )
PlaceHolderNode(  )
PlaceHolderNode(mjFLEXSELF_AUTO                 )
PlaceHolderNode(// choose between BVH and SAP automatically )
PlaceHolderNode(mjtFlexSelf )
PlaceHolderNode( 
 
 )
PlaceHolderNode(//---------------------------------- mjLROpt ------------------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(struct mjLROpt_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                )
PlaceHolderNode(// options for mj_setLengthRange() )
PlaceHolderNode(  )
PlaceHolderNode(// flags )
PlaceHolderNode(  )
PlaceHolderNode(int mode ; )
PlaceHolderNode(                       )
PlaceHolderNode(// which actuators to process (mjtLRMode) )
PlaceHolderNode(  )
PlaceHolderNode(int useexisting ; )
PlaceHolderNode(                )
PlaceHolderNode(// use existing length range if available )
PlaceHolderNode(  )
PlaceHolderNode(int uselimit ; )
PlaceHolderNode(                   )
PlaceHolderNode(// use joint and tendon limits if available )
PlaceHolderNode( 
  )
PlaceHolderNode(// algorithm parameters )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum accel ; )
PlaceHolderNode(                   )
PlaceHolderNode(// target acceleration used to compute force )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum maxforce ; )
PlaceHolderNode(                )
PlaceHolderNode(// maximum force ;  0: no limit )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum timeconst ; )
PlaceHolderNode(               )
PlaceHolderNode(// time constant for velocity reduction ;  min 0.01 )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum timestep ; )
PlaceHolderNode(                )
PlaceHolderNode(// simulation timestep ;  0: use mjOption.timestep )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum inttotal ; )
PlaceHolderNode(                )
PlaceHolderNode(// total simulation time interval )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum interval ; )
PlaceHolderNode(                )
PlaceHolderNode(// evaluation time interval (at the end) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum tolrange ; )
PlaceHolderNode(                )
PlaceHolderNode(// convergence tolerance (relative to range) )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjLROpt ; )
PlaceHolderNode(struct mjLROpt_ )
PlaceHolderNode(mjLROpt )
PlaceHolderNode( 
 
 )
PlaceHolderNode(//---------------------------------- mjVFS --------------------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(struct mjVFS_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                              )
PlaceHolderNode(// virtual file system for loading from memory )
PlaceHolderNode(  )
PlaceHolderNode(void* impl_ ; )
PlaceHolderNode(                                )
PlaceHolderNode(// internal pointer to VFS memory )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjVFS ; )
PlaceHolderNode(struct mjVFS_ )
PlaceHolderNode(mjVFS )
PlaceHolderNode( 
 )
PlaceHolderNode(//---------------------------------- mjOption ------------------------------------------------------ )
PlaceHolderNode( )
PlaceHolderNode(struct mjOption_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(               )
PlaceHolderNode(// physics options )
PlaceHolderNode(  )
PlaceHolderNode(// timing parameters )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum timestep ; )
PlaceHolderNode(                )
PlaceHolderNode(// timestep )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum apirate ; )
PlaceHolderNode(                 )
PlaceHolderNode(// update rate for remote API (Hz) )
PlaceHolderNode( 
  )
PlaceHolderNode(// solver parameters )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum impratio ; )
PlaceHolderNode(                )
PlaceHolderNode(// ratio of friction-to-normal contact impedance )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum tolerance ; )
PlaceHolderNode(               )
PlaceHolderNode(// main solver tolerance )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum ls_tolerance ; )
PlaceHolderNode(            )
PlaceHolderNode(// CG/Newton linesearch tolerance )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum noslip_tolerance ; )
PlaceHolderNode(        )
PlaceHolderNode(// noslip solver tolerance )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum ccd_tolerance ; )
PlaceHolderNode(           )
PlaceHolderNode(// convex collision solver tolerance )
PlaceHolderNode( 
  )
PlaceHolderNode(// physical constants )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum gravity[3] ; )
PlaceHolderNode(              )
PlaceHolderNode(// gravitational acceleration )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum wind[3] ; )
PlaceHolderNode(                 )
PlaceHolderNode(// wind (for lift ,  drag and viscosity) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum magnetic[3] ; )
PlaceHolderNode(             )
PlaceHolderNode(// global magnetic flux )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum density ; )
PlaceHolderNode(                 )
PlaceHolderNode(// density of medium )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum viscosity ; )
PlaceHolderNode(               )
PlaceHolderNode(// viscosity of medium )
PlaceHolderNode( 
  )
PlaceHolderNode(// override contact solver parameters (if enabled) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum o_margin ; )
PlaceHolderNode(                )
PlaceHolderNode(// margin )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum o_solref[mjNREF] ; )
PlaceHolderNode(        )
PlaceHolderNode(// solref )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum o_solimp[mjNIMP] ; )
PlaceHolderNode(        )
PlaceHolderNode(// solimp )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum o_friction[5] ; )
PlaceHolderNode(           )
PlaceHolderNode(// friction )
PlaceHolderNode( 
  )
PlaceHolderNode(// discrete settings )
PlaceHolderNode(  )
PlaceHolderNode(int integrator ; )
PlaceHolderNode(                 )
PlaceHolderNode(// integration mode (mjtIntegrator) )
PlaceHolderNode(  )
PlaceHolderNode(int cone ; )
PlaceHolderNode(                       )
PlaceHolderNode(// type of friction cone (mjtCone) )
PlaceHolderNode(  )
PlaceHolderNode(int jacobian ; )
PlaceHolderNode(                   )
PlaceHolderNode(// type of Jacobian (mjtJacobian) )
PlaceHolderNode(  )
PlaceHolderNode(int solver ; )
PlaceHolderNode(                     )
PlaceHolderNode(// solver algorithm (mjtSolver) )
PlaceHolderNode(  )
PlaceHolderNode(int iterations ; )
PlaceHolderNode(                 )
PlaceHolderNode(// maximum number of main solver iterations )
PlaceHolderNode(  )
PlaceHolderNode(int ls_iterations ; )
PlaceHolderNode(              )
PlaceHolderNode(// maximum number of CG/Newton linesearch iterations )
PlaceHolderNode(  )
PlaceHolderNode(int noslip_iterations ; )
PlaceHolderNode(          )
PlaceHolderNode(// maximum number of noslip solver iterations )
PlaceHolderNode(  )
PlaceHolderNode(int ccd_iterations ; )
PlaceHolderNode(             )
PlaceHolderNode(// maximum number of convex collision solver iterations )
PlaceHolderNode(  )
PlaceHolderNode(int disableflags ; )
PlaceHolderNode(               )
PlaceHolderNode(// bit flags for disabling standard features )
PlaceHolderNode(  )
PlaceHolderNode(int enableflags ; )
PlaceHolderNode(                )
PlaceHolderNode(// bit flags for enabling optional features )
PlaceHolderNode(  )
PlaceHolderNode(int disableactuator ; )
PlaceHolderNode(            )
PlaceHolderNode(// bit flags for disabling actuators by group id )
PlaceHolderNode( 
  )
PlaceHolderNode(// sdf collision settings )
PlaceHolderNode(  )
PlaceHolderNode(int sdf_initpoints ; )
PlaceHolderNode(             )
PlaceHolderNode(// number of starting points for gradient descent )
PlaceHolderNode(  )
PlaceHolderNode(int sdf_iterations ; )
PlaceHolderNode(             )
PlaceHolderNode(// max number of iterations for gradient descent )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjOption ; )
PlaceHolderNode(struct mjOption_ )
PlaceHolderNode(mjOption )
PlaceHolderNode( 
 
 )
PlaceHolderNode(//---------------------------------- mjVisual ------------------------------------------------------ )
PlaceHolderNode( )
PlaceHolderNode(struct mjVisual_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(               )
PlaceHolderNode(// visualization options )
PlaceHolderNode(  )
PlaceHolderNode(<children> 
global ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// global parameters )
PlaceHolderNode(    )
PlaceHolderNode(int orthographic ; )
PlaceHolderNode(             )
PlaceHolderNode(// is the free camera orthographic (0: no ,  1: yes) )
PlaceHolderNode(    )
PlaceHolderNode(float fovy ; )
PlaceHolderNode(                   )
PlaceHolderNode(// y field-of-view of free camera (orthographic ? length : degree) )
PlaceHolderNode(    )
PlaceHolderNode(float ipd ; )
PlaceHolderNode(                    )
PlaceHolderNode(// inter-pupilary distance for free camera )
PlaceHolderNode(    )
PlaceHolderNode(float azimuth ; )
PlaceHolderNode(                )
PlaceHolderNode(// initial azimuth of free camera (degrees) )
PlaceHolderNode(    )
PlaceHolderNode(float elevation ; )
PlaceHolderNode(              )
PlaceHolderNode(// initial elevation of free camera (degrees) )
PlaceHolderNode(    )
PlaceHolderNode(float linewidth ; )
PlaceHolderNode(              )
PlaceHolderNode(// line width for wireframe and ray rendering )
PlaceHolderNode(    )
PlaceHolderNode(float glow ; )
PlaceHolderNode(                   )
PlaceHolderNode(// glow coefficient for selected body )
PlaceHolderNode(    )
PlaceHolderNode(float realtime ; )
PlaceHolderNode(               )
PlaceHolderNode(// initial real-time factor (1: real time) )
PlaceHolderNode(    )
PlaceHolderNode(int   offwidth ; )
PlaceHolderNode(               )
PlaceHolderNode(// width of offscreen buffer )
PlaceHolderNode(    )
PlaceHolderNode(int   offheight ; )
PlaceHolderNode(              )
PlaceHolderNode(// height of offscreen buffer )
PlaceHolderNode(    )
PlaceHolderNode(int   ellipsoidinertia ; )
PlaceHolderNode(       )
PlaceHolderNode(// geom for inertia visualization (0: box ,  1: ellipsoid) )
PlaceHolderNode(    )
PlaceHolderNode(int   bvactive ; )
PlaceHolderNode(               )
PlaceHolderNode(// visualize active bounding volumes (0: no ,  1: yes) )
PlaceHolderNode(  )
PlaceHolderNode( 
 
  )
PlaceHolderNode(<children> 
quality ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// rendering quality )
PlaceHolderNode(    )
PlaceHolderNode(int   shadowsize ; )
PlaceHolderNode(             )
PlaceHolderNode(// size of shadowmap texture )
PlaceHolderNode(    )
PlaceHolderNode(int   offsamples ; )
PlaceHolderNode(             )
PlaceHolderNode(// number of multisamples for offscreen rendering )
PlaceHolderNode(    )
PlaceHolderNode(int   numslices ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of slices for builtin geom drawing )
PlaceHolderNode(    )
PlaceHolderNode(int   numstacks ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of stacks for builtin geom drawing )
PlaceHolderNode(    )
PlaceHolderNode(int   numquads ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of quads for box rendering )
PlaceHolderNode(  )
PlaceHolderNode( 
 
  )
PlaceHolderNode(<children> 
headlight ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// head light )
PlaceHolderNode(    )
PlaceHolderNode(float ambient[3] ; )
PlaceHolderNode(             )
PlaceHolderNode(// ambient rgb (alpha=1) )
PlaceHolderNode(    )
PlaceHolderNode(float diffuse[3] ; )
PlaceHolderNode(             )
PlaceHolderNode(// diffuse rgb (alpha=1) )
PlaceHolderNode(    )
PlaceHolderNode(float specular[3] ; )
PlaceHolderNode(            )
PlaceHolderNode(// specular rgb (alpha=1) )
PlaceHolderNode(    )
PlaceHolderNode(int   active ; )
PlaceHolderNode(                 )
PlaceHolderNode(// is headlight active )
PlaceHolderNode(  )
PlaceHolderNode( 
 
  )
PlaceHolderNode(<children> 
map ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// mapping )
PlaceHolderNode(    )
PlaceHolderNode(float stiffness ; )
PlaceHolderNode(              )
PlaceHolderNode(// mouse perturbation stiffness (space->force) )
PlaceHolderNode(    )
PlaceHolderNode(float stiffnessrot ; )
PlaceHolderNode(           )
PlaceHolderNode(// mouse perturbation stiffness (space->torque) )
PlaceHolderNode(    )
PlaceHolderNode(float force ; )
PlaceHolderNode(                  )
PlaceHolderNode(// from force units to space units )
PlaceHolderNode(    )
PlaceHolderNode(float torque ; )
PlaceHolderNode(                 )
PlaceHolderNode(// from torque units to space units )
PlaceHolderNode(    )
PlaceHolderNode(float alpha ; )
PlaceHolderNode(                  )
PlaceHolderNode(// scale geom alphas when transparency is enabled )
PlaceHolderNode(    )
PlaceHolderNode(float fogstart ; )
PlaceHolderNode(               )
PlaceHolderNode(// OpenGL fog starts at fogstart * mjModel.stat.extent )
PlaceHolderNode(    )
PlaceHolderNode(float fogend ; )
PlaceHolderNode(                 )
PlaceHolderNode(// OpenGL fog ends at fogend * mjModel.stat.extent )
PlaceHolderNode(    )
PlaceHolderNode(float znear ; )
PlaceHolderNode(                  )
PlaceHolderNode(// near clipping plane = znear * mjModel.stat.extent )
PlaceHolderNode(    )
PlaceHolderNode(float zfar ; )
PlaceHolderNode(                   )
PlaceHolderNode(// far clipping plane = zfar * mjModel.stat.extent )
PlaceHolderNode(    )
PlaceHolderNode(float haze ; )
PlaceHolderNode(                   )
PlaceHolderNode(// haze ratio )
PlaceHolderNode(    )
PlaceHolderNode(float shadowclip ; )
PlaceHolderNode(             )
PlaceHolderNode(// directional light: shadowclip * mjModel.stat.extent )
PlaceHolderNode(    )
PlaceHolderNode(float shadowscale ; )
PlaceHolderNode(            )
PlaceHolderNode(// spot light: shadowscale * light.cutoff )
PlaceHolderNode(    )
PlaceHolderNode(float actuatortendon ; )
PlaceHolderNode(         )
PlaceHolderNode(// scale tendon width )
PlaceHolderNode(  )
PlaceHolderNode( 
 
  )
PlaceHolderNode(<children> 
scale ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// scale of decor elements relative to mean body size )
PlaceHolderNode(    )
PlaceHolderNode(float forcewidth ; )
PlaceHolderNode(             )
PlaceHolderNode(// width of force arrow )
PlaceHolderNode(    )
PlaceHolderNode(float contactwidth ; )
PlaceHolderNode(           )
PlaceHolderNode(// contact width )
PlaceHolderNode(    )
PlaceHolderNode(float contactheight ; )
PlaceHolderNode(          )
PlaceHolderNode(// contact height )
PlaceHolderNode(    )
PlaceHolderNode(float connect ; )
PlaceHolderNode(                )
PlaceHolderNode(// autoconnect capsule width )
PlaceHolderNode(    )
PlaceHolderNode(float com ; )
PlaceHolderNode(                    )
PlaceHolderNode(// com radius )
PlaceHolderNode(    )
PlaceHolderNode(float camera ; )
PlaceHolderNode(                 )
PlaceHolderNode(// camera object )
PlaceHolderNode(    )
PlaceHolderNode(float light ; )
PlaceHolderNode(                  )
PlaceHolderNode(// light object )
PlaceHolderNode(    )
PlaceHolderNode(float selectpoint ; )
PlaceHolderNode(            )
PlaceHolderNode(// selection point )
PlaceHolderNode(    )
PlaceHolderNode(float jointlength ; )
PlaceHolderNode(            )
PlaceHolderNode(// joint length )
PlaceHolderNode(    )
PlaceHolderNode(float jointwidth ; )
PlaceHolderNode(             )
PlaceHolderNode(// joint width )
PlaceHolderNode(    )
PlaceHolderNode(float actuatorlength ; )
PlaceHolderNode(         )
PlaceHolderNode(// actuator length )
PlaceHolderNode(    )
PlaceHolderNode(float actuatorwidth ; )
PlaceHolderNode(          )
PlaceHolderNode(// actuator width )
PlaceHolderNode(    )
PlaceHolderNode(float framelength ; )
PlaceHolderNode(            )
PlaceHolderNode(// bodyframe axis length )
PlaceHolderNode(    )
PlaceHolderNode(float framewidth ; )
PlaceHolderNode(             )
PlaceHolderNode(// bodyframe axis width )
PlaceHolderNode(    )
PlaceHolderNode(float constraint ; )
PlaceHolderNode(             )
PlaceHolderNode(// constraint width )
PlaceHolderNode(    )
PlaceHolderNode(float slidercrank ; )
PlaceHolderNode(            )
PlaceHolderNode(// slidercrank width )
PlaceHolderNode(    )
PlaceHolderNode(float frustum ; )
PlaceHolderNode(                )
PlaceHolderNode(// frustum zfar plane )
PlaceHolderNode(  )
PlaceHolderNode( 
 
  )
PlaceHolderNode(<children> 
rgba ; )
PlaceHolderNode(struct )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(                       )
PlaceHolderNode(// color of decor elements )
PlaceHolderNode(    )
PlaceHolderNode(float fog[4] ; )
PlaceHolderNode(                 )
PlaceHolderNode(// fog )
PlaceHolderNode(    )
PlaceHolderNode(float haze[4] ; )
PlaceHolderNode(                )
PlaceHolderNode(// haze )
PlaceHolderNode(    )
PlaceHolderNode(float force[4] ; )
PlaceHolderNode(               )
PlaceHolderNode(// external force )
PlaceHolderNode(    )
PlaceHolderNode(float inertia[4] ; )
PlaceHolderNode(             )
PlaceHolderNode(// inertia box )
PlaceHolderNode(    )
PlaceHolderNode(float joint[4] ; )
PlaceHolderNode(               )
PlaceHolderNode(// joint )
PlaceHolderNode(    )
PlaceHolderNode(float actuator[4] ; )
PlaceHolderNode(            )
PlaceHolderNode(// actuator ,  neutral )
PlaceHolderNode(    )
PlaceHolderNode(float actuatornegative[4] ; )
PlaceHolderNode(    )
PlaceHolderNode(// actuator ,  negative limit )
PlaceHolderNode(    )
PlaceHolderNode(float actuatorpositive[4] ; )
PlaceHolderNode(    )
PlaceHolderNode(// actuator ,  positive limit )
PlaceHolderNode(    )
PlaceHolderNode(float com[4] ; )
PlaceHolderNode(                 )
PlaceHolderNode(// center of mass )
PlaceHolderNode(    )
PlaceHolderNode(float camera[4] ; )
PlaceHolderNode(              )
PlaceHolderNode(// camera object )
PlaceHolderNode(    )
PlaceHolderNode(float light[4] ; )
PlaceHolderNode(               )
PlaceHolderNode(// light object )
PlaceHolderNode(    )
PlaceHolderNode(float selectpoint[4] ; )
PlaceHolderNode(         )
PlaceHolderNode(// selection point )
PlaceHolderNode(    )
PlaceHolderNode(float connect[4] ; )
PlaceHolderNode(             )
PlaceHolderNode(// auto connect )
PlaceHolderNode(    )
PlaceHolderNode(float contactpoint[4] ; )
PlaceHolderNode(        )
PlaceHolderNode(// contact point )
PlaceHolderNode(    )
PlaceHolderNode(float contactforce[4] ; )
PlaceHolderNode(        )
PlaceHolderNode(// contact force )
PlaceHolderNode(    )
PlaceHolderNode(float contactfriction[4] ; )
PlaceHolderNode(     )
PlaceHolderNode(// contact friction force )
PlaceHolderNode(    )
PlaceHolderNode(float contacttorque[4] ; )
PlaceHolderNode(       )
PlaceHolderNode(// contact torque )
PlaceHolderNode(    )
PlaceHolderNode(float contactgap[4] ; )
PlaceHolderNode(          )
PlaceHolderNode(// contact point in gap )
PlaceHolderNode(    )
PlaceHolderNode(float rangefinder[4] ; )
PlaceHolderNode(         )
PlaceHolderNode(// rangefinder ray )
PlaceHolderNode(    )
PlaceHolderNode(float constraint[4] ; )
PlaceHolderNode(          )
PlaceHolderNode(// constraint )
PlaceHolderNode(    )
PlaceHolderNode(float slidercrank[4] ; )
PlaceHolderNode(         )
PlaceHolderNode(// slidercrank )
PlaceHolderNode(    )
PlaceHolderNode(float crankbroken[4] ; )
PlaceHolderNode(         )
PlaceHolderNode(// used when crank must be stretched/broken )
PlaceHolderNode(    )
PlaceHolderNode(float frustum[4] ; )
PlaceHolderNode(             )
PlaceHolderNode(// camera frustum )
PlaceHolderNode(    )
PlaceHolderNode(float bv[4] ; )
PlaceHolderNode(                  )
PlaceHolderNode(// bounding volume )
PlaceHolderNode(    )
PlaceHolderNode(float bvactive[4] ; )
PlaceHolderNode(            )
PlaceHolderNode(// active bounding volume )
PlaceHolderNode(  )
PlaceHolderNode( )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjVisual ; )
PlaceHolderNode(struct mjVisual_ )
PlaceHolderNode(mjVisual )
PlaceHolderNode( 
 
 )
PlaceHolderNode(//---------------------------------- mjStatistic --------------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(struct mjStatistic_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(            )
PlaceHolderNode(// model statistics (in qpos0) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum meaninertia ; )
PlaceHolderNode(             )
PlaceHolderNode(// mean diagonal inertia )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum meanmass ; )
PlaceHolderNode(                )
PlaceHolderNode(// mean body mass )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum meansize ; )
PlaceHolderNode(                )
PlaceHolderNode(// mean body size )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum extent ; )
PlaceHolderNode(                  )
PlaceHolderNode(// spatial extent )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum center[3] ; )
PlaceHolderNode(               )
PlaceHolderNode(// center of model )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjStatistic ; )
PlaceHolderNode(struct mjStatistic_ )
PlaceHolderNode(mjStatistic )
PlaceHolderNode( 
 
 )
PlaceHolderNode(//---------------------------------- mjModel ------------------------------------------------------- )
PlaceHolderNode( )
PlaceHolderNode(struct mjModel_ 
<children> ; )
PlaceHolderNode({ 
<children> } )
PlaceHolderNode(  )
PlaceHolderNode(// ------------------------------- sizes )
PlaceHolderNode( 
  )
PlaceHolderNode(// sizes needed at mjModel construction )
PlaceHolderNode(  )
PlaceHolderNode(int nq ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of generalized coordinates = dim(qpos) )
PlaceHolderNode(  )
PlaceHolderNode(int nv ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of degrees of freedom = dim(qvel) )
PlaceHolderNode(  )
PlaceHolderNode(int nu ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of actuators/controls = dim(ctrl) )
PlaceHolderNode(  )
PlaceHolderNode(int na ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of activation states = dim(act) )
PlaceHolderNode(  )
PlaceHolderNode(int nbody ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of bodies )
PlaceHolderNode(  )
PlaceHolderNode(int nbvh ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of total bounding volumes in all bodies )
PlaceHolderNode(  )
PlaceHolderNode(int nbvhstatic ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of static bounding volumes (aabb stored in mjModel) )
PlaceHolderNode(  )
PlaceHolderNode(int nbvhdynamic ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of dynamic bounding volumes (aabb stored in mjData) )
PlaceHolderNode(  )
PlaceHolderNode(int njnt ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of joints )
PlaceHolderNode(  )
PlaceHolderNode(int ngeom ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of geoms )
PlaceHolderNode(  )
PlaceHolderNode(int nsite ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of sites )
PlaceHolderNode(  )
PlaceHolderNode(int ncam ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of cameras )
PlaceHolderNode(  )
PlaceHolderNode(int nlight ; )
PlaceHolderNode(                     )
PlaceHolderNode(// number of lights )
PlaceHolderNode(  )
PlaceHolderNode(int nflex ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexvert ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of vertices in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexedge ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of edges in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexelem ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of elements in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexelemdata ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of element vertex ids in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexelemedge ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of element edge ids in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexshelldata ; )
PlaceHolderNode(             )
PlaceHolderNode(// number of shell fragment vertex ids in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflexevpair ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of element-vertex pairs in all flexes )
PlaceHolderNode(  )
PlaceHolderNode(int nflextexcoord ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of vertices with texture coordinates )
PlaceHolderNode(  )
PlaceHolderNode(int nmesh ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of meshes )
PlaceHolderNode(  )
PlaceHolderNode(int nmeshvert ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of vertices in all meshes )
PlaceHolderNode(  )
PlaceHolderNode(int nmeshnormal ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of normals in all meshes )
PlaceHolderNode(  )
PlaceHolderNode(int nmeshtexcoord ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of texcoords in all meshes )
PlaceHolderNode(  )
PlaceHolderNode(int nmeshface ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of triangular faces in all meshes )
PlaceHolderNode(  )
PlaceHolderNode(int nmeshgraph ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of ints in mesh auxiliary data )
PlaceHolderNode(  )
PlaceHolderNode(int nskin ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of skins )
PlaceHolderNode(  )
PlaceHolderNode(int nskinvert ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of vertices in all skins )
PlaceHolderNode(  )
PlaceHolderNode(int nskintexvert ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of vertiex with texcoords in all skins )
PlaceHolderNode(  )
PlaceHolderNode(int nskinface ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of triangular faces in all skins )
PlaceHolderNode(  )
PlaceHolderNode(int nskinbone ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of bones in all skins )
PlaceHolderNode(  )
PlaceHolderNode(int nskinbonevert ; )
PlaceHolderNode(              )
PlaceHolderNode(// number of vertices in all skin bones )
PlaceHolderNode(  )
PlaceHolderNode(int nhfield ; )
PlaceHolderNode(                    )
PlaceHolderNode(// number of heightfields )
PlaceHolderNode(  )
PlaceHolderNode(int nhfielddata ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of data points in all heightfields )
PlaceHolderNode(  )
PlaceHolderNode(int ntex ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of textures )
PlaceHolderNode(  )
PlaceHolderNode(int ntexdata ; )
PlaceHolderNode(                   )
PlaceHolderNode(// number of bytes in texture rgb data )
PlaceHolderNode(  )
PlaceHolderNode(int nmat ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of materials )
PlaceHolderNode(  )
PlaceHolderNode(int npair ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of predefined geom pairs )
PlaceHolderNode(  )
PlaceHolderNode(int nexclude ; )
PlaceHolderNode(                   )
PlaceHolderNode(// number of excluded geom pairs )
PlaceHolderNode(  )
PlaceHolderNode(int neq ; )
PlaceHolderNode(                        )
PlaceHolderNode(// number of equality constraints )
PlaceHolderNode(  )
PlaceHolderNode(int ntendon ; )
PlaceHolderNode(                    )
PlaceHolderNode(// number of tendons )
PlaceHolderNode(  )
PlaceHolderNode(int nwrap ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of wrap objects in all tendon paths )
PlaceHolderNode(  )
PlaceHolderNode(int nsensor ; )
PlaceHolderNode(                    )
PlaceHolderNode(// number of sensors )
PlaceHolderNode(  )
PlaceHolderNode(int nnumeric ; )
PlaceHolderNode(                   )
PlaceHolderNode(// number of numeric custom fields )
PlaceHolderNode(  )
PlaceHolderNode(int nnumericdata ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of mjtNums in all numeric fields )
PlaceHolderNode(  )
PlaceHolderNode(int ntext ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of text custom fields )
PlaceHolderNode(  )
PlaceHolderNode(int ntextdata ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of mjtBytes in all text fields )
PlaceHolderNode(  )
PlaceHolderNode(int ntuple ; )
PlaceHolderNode(                     )
PlaceHolderNode(// number of tuple custom fields )
PlaceHolderNode(  )
PlaceHolderNode(int ntupledata ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of objects in all tuple fields )
PlaceHolderNode(  )
PlaceHolderNode(int nkey ; )
PlaceHolderNode(                       )
PlaceHolderNode(// number of keyframes )
PlaceHolderNode(  )
PlaceHolderNode(int nmocap ; )
PlaceHolderNode(                     )
PlaceHolderNode(// number of mocap bodies )
PlaceHolderNode(  )
PlaceHolderNode(int nplugin ; )
PlaceHolderNode(                    )
PlaceHolderNode(// number of plugin instances )
PlaceHolderNode(  )
PlaceHolderNode(int npluginattr ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of chars in all plugin config attributes )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_body ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of mjtNums in body_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_jnt ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of mjtNums in jnt_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_geom ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of mjtNums in geom_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_site ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of mjtNums in site_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_cam ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of mjtNums in cam_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_tendon ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of mjtNums in tendon_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_actuator ; )
PlaceHolderNode(             )
PlaceHolderNode(// number of mjtNums in actuator_user )
PlaceHolderNode(  )
PlaceHolderNode(int nuser_sensor ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of mjtNums in sensor_user )
PlaceHolderNode(  )
PlaceHolderNode(int nnames ; )
PlaceHolderNode(                     )
PlaceHolderNode(// number of chars in all names )
PlaceHolderNode(  )
PlaceHolderNode(int nnames_map ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of slots in the names hash map )
PlaceHolderNode(  )
PlaceHolderNode(int npaths ; )
PlaceHolderNode(                     )
PlaceHolderNode(// number of chars in all paths )
PlaceHolderNode( 
  )
PlaceHolderNode(// sizes set after mjModel construction (only affect mjData) )
PlaceHolderNode(  )
PlaceHolderNode(int nM ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of non-zeros in sparse inertia matrix )
PlaceHolderNode(  )
PlaceHolderNode(int nB ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of non-zeros in sparse body-dof matrix )
PlaceHolderNode(  )
PlaceHolderNode(int nC ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of non-zeros in sparse reduced dof-dof matrix )
PlaceHolderNode(  )
PlaceHolderNode(int nD ; )
PlaceHolderNode(                         )
PlaceHolderNode(// number of non-zeros in sparse dof-dof matrix )
PlaceHolderNode(  )
PlaceHolderNode(int ntree ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of kinematic trees under world body )
PlaceHolderNode(  )
PlaceHolderNode(int ngravcomp ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of bodies with nonzero gravcomp )
PlaceHolderNode(  )
PlaceHolderNode(int nemax ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of potential equality-constraint rows )
PlaceHolderNode(  )
PlaceHolderNode(int njmax ; )
PlaceHolderNode(                      )
PlaceHolderNode(// number of available rows in constraint Jacobian )
PlaceHolderNode(  )
PlaceHolderNode(int nconmax ; )
PlaceHolderNode(                    )
PlaceHolderNode(// number of potential contacts in contact list )
PlaceHolderNode(  )
PlaceHolderNode(int nuserdata ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of mjtNums reserved for the user )
PlaceHolderNode(  )
PlaceHolderNode(int nsensordata ; )
PlaceHolderNode(                )
PlaceHolderNode(// number of mjtNums in sensor data vector )
PlaceHolderNode(  )
PlaceHolderNode(int npluginstate ; )
PlaceHolderNode(               )
PlaceHolderNode(// number of mjtNums in plugin state vector )
PlaceHolderNode( 
  )
PlaceHolderNode(size_t narena ; )
PlaceHolderNode(                  )
PlaceHolderNode(// number of bytes in the mjData arena (inclusive of stack) )
PlaceHolderNode(  )
PlaceHolderNode(size_t nbuffer ; )
PlaceHolderNode(                 )
PlaceHolderNode(// number of bytes in buffer )
PlaceHolderNode( 
  )
PlaceHolderNode(// ------------------------------- options and statistics )
PlaceHolderNode( 
  )
PlaceHolderNode(mjOption opt ; )
PlaceHolderNode(                   )
PlaceHolderNode(// physics options )
PlaceHolderNode(  )
PlaceHolderNode(mjVisual vis ; )
PlaceHolderNode(                   )
PlaceHolderNode(// visualization options )
PlaceHolderNode(  )
PlaceHolderNode(mjStatistic stat ; )
PlaceHolderNode(               )
PlaceHolderNode(// model statistics )
PlaceHolderNode( 
  )
PlaceHolderNode(// ------------------------------- buffers )
PlaceHolderNode( 
  )
PlaceHolderNode(// main buffer )
PlaceHolderNode(  )
PlaceHolderNode(void*     buffer ; )
PlaceHolderNode(               )
PlaceHolderNode(// main buffer ;  all pointers point in it    (nbuffer) )
PlaceHolderNode( 
  )
PlaceHolderNode(// default generalized coordinates )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   qpos0 ; )
PlaceHolderNode(                )
PlaceHolderNode(// qpos values at default pose              (nq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   qpos_spring ; )
PlaceHolderNode(          )
PlaceHolderNode(// reference pose for springs               (nq x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// bodies )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_parentid ; )
PlaceHolderNode(        )
PlaceHolderNode(// id of body's parent                      (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_rootid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of root above body                    (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_weldid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of body that this body is welded to   (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_mocapid ; )
PlaceHolderNode(         )
PlaceHolderNode(// id of mocap data ;  -1: none               (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_jntnum ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of joints for this body           (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_jntadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// start addr of joints ;  -1: no joints      (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_dofnum ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of motion degrees of freedom      (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_dofadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// start addr of dofs ;  -1: no dofs          (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_treeid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of body's kinematic tree ;  -1: static  (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_geomnum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of geoms                          (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_geomadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// start addr of geoms ;  -1: no geoms        (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  body_simple ; )
PlaceHolderNode(          )
PlaceHolderNode(// 1: diag M ;  2: diag M ,  sliders only       (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  body_sameframe ; )
PlaceHolderNode(       )
PlaceHolderNode(// same frame as inertia (mjtSameframe)     (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_pos ; )
PlaceHolderNode(             )
PlaceHolderNode(// position offset rel. to parent body      (nbody x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_quat ; )
PlaceHolderNode(            )
PlaceHolderNode(// orientation offset rel. to parent body   (nbody x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_ipos ; )
PlaceHolderNode(            )
PlaceHolderNode(// local position of center of mass         (nbody x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_iquat ; )
PlaceHolderNode(           )
PlaceHolderNode(// local orientation of inertia ellipsoid   (nbody x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_mass ; )
PlaceHolderNode(            )
PlaceHolderNode(// mass                                     (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_subtreemass ; )
PlaceHolderNode(     )
PlaceHolderNode(// mass of subtree starting at this body    (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_inertia ; )
PlaceHolderNode(         )
PlaceHolderNode(// diagonal inertia in ipos/iquat frame     (nbody x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_invweight0 ; )
PlaceHolderNode(      )
PlaceHolderNode(// mean inv inert in qpos0 (trn ,  rot)       (nbody x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_gravcomp ; )
PlaceHolderNode(        )
PlaceHolderNode(// antigravity force ,  units of body weight  (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_margin ; )
PlaceHolderNode(          )
PlaceHolderNode(// MAX over all geom margins                (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   body_user ; )
PlaceHolderNode(            )
PlaceHolderNode(// user data                                (nbody x nuser_body) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_plugin ; )
PlaceHolderNode(          )
PlaceHolderNode(// plugin instance id ;  -1: not in use       (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_contype ; )
PlaceHolderNode(         )
PlaceHolderNode(// OR over all geom contypes                (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_conaffinity ; )
PlaceHolderNode(     )
PlaceHolderNode(// OR over all geom conaffinities           (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_bvhadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// address of bvh root                      (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      body_bvhnum ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of bounding volumes               (nbody x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// bounding volume hierarchy )
PlaceHolderNode(  )
PlaceHolderNode(int*      bvh_depth ; )
PlaceHolderNode(            )
PlaceHolderNode(// depth in the bounding volume hierarchy   (nbvh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      bvh_child ; )
PlaceHolderNode(            )
PlaceHolderNode(// left and right children in tree          (nbvh x 2) )
PlaceHolderNode(  )
PlaceHolderNode(int*      bvh_nodeid ; )
PlaceHolderNode(           )
PlaceHolderNode(// geom or elem id of node ;  -1: non-leaf    (nbvh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   bvh_aabb ; )
PlaceHolderNode(             )
PlaceHolderNode(// local bounding box (center ,  size)        (nbvhstatic x 6) )
PlaceHolderNode( 
  )
PlaceHolderNode(// joints )
PlaceHolderNode(  )
PlaceHolderNode(int*      jnt_type ; )
PlaceHolderNode(             )
PlaceHolderNode(// type of joint (mjtJoint)                 (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      jnt_qposadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// start addr in 'qpos' for joint's data    (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      jnt_dofadr ; )
PlaceHolderNode(           )
PlaceHolderNode(// start addr in 'qvel' for joint's data    (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      jnt_bodyid ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of joint's body                       (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      jnt_group ; )
PlaceHolderNode(            )
PlaceHolderNode(// group for visibility                     (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  jnt_limited ; )
PlaceHolderNode(          )
PlaceHolderNode(// does joint have limits                   (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  jnt_actfrclimited ; )
PlaceHolderNode(    )
PlaceHolderNode(// does joint have actuator force limits    (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  jnt_actgravcomp ; )
PlaceHolderNode(      )
PlaceHolderNode(// is gravcomp force applied via actuators  (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_solref ; )
PlaceHolderNode(           )
PlaceHolderNode(// constraint solver reference: limit       (njnt x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_solimp ; )
PlaceHolderNode(           )
PlaceHolderNode(// constraint solver impedance: limit       (njnt x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_pos ; )
PlaceHolderNode(              )
PlaceHolderNode(// local anchor position                    (njnt x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_axis ; )
PlaceHolderNode(             )
PlaceHolderNode(// local joint axis                         (njnt x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_stiffness ; )
PlaceHolderNode(        )
PlaceHolderNode(// stiffness coefficient                    (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_range ; )
PlaceHolderNode(            )
PlaceHolderNode(// joint limits                             (njnt x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_actfrcrange ; )
PlaceHolderNode(      )
PlaceHolderNode(// range of total actuator force            (njnt x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_margin ; )
PlaceHolderNode(           )
PlaceHolderNode(// min distance for limit detection         (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   jnt_user ; )
PlaceHolderNode(             )
PlaceHolderNode(// user data                                (njnt x nuser_jnt) )
PlaceHolderNode( 
  )
PlaceHolderNode(// dofs )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_bodyid ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of dof's body                         (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_jntid ; )
PlaceHolderNode(            )
PlaceHolderNode(// id of dof's joint                        (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_parentid ; )
PlaceHolderNode(         )
PlaceHolderNode(// id of dof's parent ;  -1: none             (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_treeid ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of dof's kinematic tree               (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_Madr ; )
PlaceHolderNode(             )
PlaceHolderNode(// dof address in M-diagonal                (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      dof_simplenum ; )
PlaceHolderNode(        )
PlaceHolderNode(// number of consecutive simple dofs        (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_solref ; )
PlaceHolderNode(           )
PlaceHolderNode(// constraint solver reference:frictionloss (nv x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_solimp ; )
PlaceHolderNode(           )
PlaceHolderNode(// constraint solver impedance:frictionloss (nv x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_frictionloss ; )
PlaceHolderNode(     )
PlaceHolderNode(// dof friction loss                        (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_armature ; )
PlaceHolderNode(         )
PlaceHolderNode(// dof armature inertia/mass                (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_damping ; )
PlaceHolderNode(          )
PlaceHolderNode(// damping coefficient                      (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_invweight0 ; )
PlaceHolderNode(       )
PlaceHolderNode(// diag. inverse inertia in qpos0           (nv x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   dof_M0 ; )
PlaceHolderNode(               )
PlaceHolderNode(// diag. inertia in qpos0                   (nv x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// geoms )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_type ; )
PlaceHolderNode(            )
PlaceHolderNode(// geometric type (mjtGeom)                 (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_contype ; )
PlaceHolderNode(         )
PlaceHolderNode(// geom contact type                        (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_conaffinity ; )
PlaceHolderNode(     )
PlaceHolderNode(// geom contact affinity                    (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_condim ; )
PlaceHolderNode(          )
PlaceHolderNode(// contact dimensionality (1 ,  3 ,  4 ,  6)      (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_bodyid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of geom's body                        (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_dataid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of geom's mesh/hfield ;  -1: none       (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_matid ; )
PlaceHolderNode(           )
PlaceHolderNode(// material id for rendering ;  -1: none      (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_group ; )
PlaceHolderNode(           )
PlaceHolderNode(// group for visibility                     (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_priority ; )
PlaceHolderNode(        )
PlaceHolderNode(// geom contact priority                    (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      geom_plugin ; )
PlaceHolderNode(          )
PlaceHolderNode(// plugin instance id ;  -1: not in use       (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  geom_sameframe ; )
PlaceHolderNode(       )
PlaceHolderNode(// same frame as body (mjtSameframe)        (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_solmix ; )
PlaceHolderNode(          )
PlaceHolderNode(// mixing coef for solref/imp in geom pair  (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_solref ; )
PlaceHolderNode(          )
PlaceHolderNode(// constraint solver reference: contact     (ngeom x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_solimp ; )
PlaceHolderNode(          )
PlaceHolderNode(// constraint solver impedance: contact     (ngeom x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_size ; )
PlaceHolderNode(            )
PlaceHolderNode(// geom-specific size parameters            (ngeom x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_aabb ; )
PlaceHolderNode(            )
PlaceHolderNode(// bounding box ,  (center ,  size)             (ngeom x 6) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_rbound ; )
PlaceHolderNode(          )
PlaceHolderNode(// radius of bounding sphere                (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_pos ; )
PlaceHolderNode(             )
PlaceHolderNode(// local position offset rel. to body       (ngeom x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_quat ; )
PlaceHolderNode(            )
PlaceHolderNode(// local orientation offset rel. to body    (ngeom x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_friction ; )
PlaceHolderNode(        )
PlaceHolderNode(// friction for (slide ,  spin ,  roll)         (ngeom x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_margin ; )
PlaceHolderNode(          )
PlaceHolderNode(// detect contact if dist<margin            (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_gap ; )
PlaceHolderNode(             )
PlaceHolderNode(// include in solver if dist<margin-gap     (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_fluid ; )
PlaceHolderNode(           )
PlaceHolderNode(// fluid interaction parameters             (ngeom x mjNFLUID) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   geom_user ; )
PlaceHolderNode(            )
PlaceHolderNode(// user data                                (ngeom x nuser_geom) )
PlaceHolderNode(  )
PlaceHolderNode(float*    geom_rgba ; )
PlaceHolderNode(            )
PlaceHolderNode(// rgba when material is omitted            (ngeom x 4) )
PlaceHolderNode( 
  )
PlaceHolderNode(// sites )
PlaceHolderNode(  )
PlaceHolderNode(int*      site_type ; )
PlaceHolderNode(            )
PlaceHolderNode(// geom type for rendering (mjtGeom)        (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      site_bodyid ; )
PlaceHolderNode(          )
PlaceHolderNode(// id of site's body                        (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      site_matid ; )
PlaceHolderNode(           )
PlaceHolderNode(// material id for rendering ;  -1: none      (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      site_group ; )
PlaceHolderNode(           )
PlaceHolderNode(// group for visibility                     (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  site_sameframe ; )
PlaceHolderNode(       )
PlaceHolderNode(// same frame as body (mjtSameframe)        (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   site_size ; )
PlaceHolderNode(            )
PlaceHolderNode(// geom size for rendering                  (nsite x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   site_pos ; )
PlaceHolderNode(             )
PlaceHolderNode(// local position offset rel. to body       (nsite x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   site_quat ; )
PlaceHolderNode(            )
PlaceHolderNode(// local orientation offset rel. to body    (nsite x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   site_user ; )
PlaceHolderNode(            )
PlaceHolderNode(// user data                                (nsite x nuser_site) )
PlaceHolderNode(  )
PlaceHolderNode(float*    site_rgba ; )
PlaceHolderNode(            )
PlaceHolderNode(// rgba when material is omitted            (nsite x 4) )
PlaceHolderNode( 
  )
PlaceHolderNode(// cameras )
PlaceHolderNode(  )
PlaceHolderNode(int*      cam_mode ; )
PlaceHolderNode(             )
PlaceHolderNode(// camera tracking mode (mjtCamLight)       (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      cam_bodyid ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of camera's body                      (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      cam_targetbodyid ; )
PlaceHolderNode(     )
PlaceHolderNode(// id of targeted body ;  -1: none            (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_pos ; )
PlaceHolderNode(              )
PlaceHolderNode(// position rel. to body frame              (ncam x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_quat ; )
PlaceHolderNode(             )
PlaceHolderNode(// orientation rel. to body frame           (ncam x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_poscom0 ; )
PlaceHolderNode(          )
PlaceHolderNode(// global position rel. to sub-com in qpos0 (ncam x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_pos0 ; )
PlaceHolderNode(             )
PlaceHolderNode(// global position rel. to body in qpos0    (ncam x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_mat0 ; )
PlaceHolderNode(             )
PlaceHolderNode(// global orientation in qpos0              (ncam x 9) )
PlaceHolderNode(  )
PlaceHolderNode(int*      cam_orthographic ; )
PlaceHolderNode(     )
PlaceHolderNode(// orthographic camera ;  0: no ,  1: yes       (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_fovy ; )
PlaceHolderNode(             )
PlaceHolderNode(// y field-of-view (ortho ? len : deg)      (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_ipd ; )
PlaceHolderNode(              )
PlaceHolderNode(// inter-pupilary distance                  (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      cam_resolution ; )
PlaceHolderNode(       )
PlaceHolderNode(// resolution: pixels [width ,  height]       (ncam x 2) )
PlaceHolderNode(  )
PlaceHolderNode(float*    cam_sensorsize ; )
PlaceHolderNode(       )
PlaceHolderNode(// sensor size: length [width ,  height]      (ncam x 2) )
PlaceHolderNode(  )
PlaceHolderNode(float*    cam_intrinsic ; )
PlaceHolderNode(        )
PlaceHolderNode(// [focal length ;  principal point]          (ncam x 4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   cam_user ; )
PlaceHolderNode(             )
PlaceHolderNode(// user data                                (ncam x nuser_cam) )
PlaceHolderNode( 
  )
PlaceHolderNode(// lights )
PlaceHolderNode(  )
PlaceHolderNode(int*      light_mode ; )
PlaceHolderNode(           )
PlaceHolderNode(// light tracking mode (mjtCamLight)        (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      light_bodyid ; )
PlaceHolderNode(         )
PlaceHolderNode(// id of light's body                       (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      light_targetbodyid ; )
PlaceHolderNode(   )
PlaceHolderNode(// id of targeted body ;  -1: none            (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  light_directional ; )
PlaceHolderNode(    )
PlaceHolderNode(// directional light                        (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  light_castshadow ; )
PlaceHolderNode(     )
PlaceHolderNode(// does light cast shadows                  (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_bulbradius ; )
PlaceHolderNode(     )
PlaceHolderNode(// light radius for soft shadows            (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  light_active ; )
PlaceHolderNode(         )
PlaceHolderNode(// is light on                              (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   light_pos ; )
PlaceHolderNode(            )
PlaceHolderNode(// position rel. to body frame              (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   light_dir ; )
PlaceHolderNode(            )
PlaceHolderNode(// direction rel. to body frame             (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   light_poscom0 ; )
PlaceHolderNode(        )
PlaceHolderNode(// global position rel. to sub-com in qpos0 (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   light_pos0 ; )
PlaceHolderNode(           )
PlaceHolderNode(// global position rel. to body in qpos0    (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   light_dir0 ; )
PlaceHolderNode(           )
PlaceHolderNode(// global direction in qpos0                (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_attenuation ; )
PlaceHolderNode(    )
PlaceHolderNode(// OpenGL attenuation (quadratic model)     (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_cutoff ; )
PlaceHolderNode(         )
PlaceHolderNode(// OpenGL cutoff                            (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_exponent ; )
PlaceHolderNode(       )
PlaceHolderNode(// OpenGL exponent                          (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_ambient ; )
PlaceHolderNode(        )
PlaceHolderNode(// ambient rgb (alpha=1)                    (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_diffuse ; )
PlaceHolderNode(        )
PlaceHolderNode(// diffuse rgb (alpha=1)                    (nlight x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    light_specular ; )
PlaceHolderNode(       )
PlaceHolderNode(// specular rgb (alpha=1)                   (nlight x 3) )
PlaceHolderNode( 
  )
PlaceHolderNode(// flexes: contact properties )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_contype ; )
PlaceHolderNode(         )
PlaceHolderNode(// flex contact type                        (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_conaffinity ; )
PlaceHolderNode(     )
PlaceHolderNode(// flex contact affinity                    (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_condim ; )
PlaceHolderNode(          )
PlaceHolderNode(// contact dimensionality (1 ,  3 ,  4 ,  6)      (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_priority ; )
PlaceHolderNode(        )
PlaceHolderNode(// flex contact priority                    (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_solmix ; )
PlaceHolderNode(          )
PlaceHolderNode(// mix coef for solref/imp in contact pair  (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_solref ; )
PlaceHolderNode(          )
PlaceHolderNode(// constraint solver reference: contact     (nflex x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_solimp ; )
PlaceHolderNode(          )
PlaceHolderNode(// constraint solver impedance: contact     (nflex x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_friction ; )
PlaceHolderNode(        )
PlaceHolderNode(// friction for (slide ,  spin ,  roll)         (nflex x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_margin ; )
PlaceHolderNode(          )
PlaceHolderNode(// detect contact if dist<margin            (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_gap ; )
PlaceHolderNode(             )
PlaceHolderNode(// include in solver if dist<margin-gap     (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flex_internal ; )
PlaceHolderNode(        )
PlaceHolderNode(// internal flex collision enabled          (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_selfcollide ; )
PlaceHolderNode(     )
PlaceHolderNode(// self collision mode (mjtFlexSelf)        (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_activelayers ; )
PlaceHolderNode(    )
PlaceHolderNode(// number of active element layers ,  3D only (nflex x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// flexes: other properties )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_dim ; )
PlaceHolderNode(             )
PlaceHolderNode(// 1: lines ,  2: triangles ,  3: tetrahedra    (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_matid ; )
PlaceHolderNode(           )
PlaceHolderNode(// material id for rendering                (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_group ; )
PlaceHolderNode(           )
PlaceHolderNode(// group for visibility                     (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_vertadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first vertex address                     (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_vertnum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of vertices                       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_edgeadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first edge address                       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_edgenum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of edges                          (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first element address                    (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemnum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of elements                       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemdataadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// first element vertex id address          (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemedgeadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// first element edge id address            (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_shellnum ; )
PlaceHolderNode(        )
PlaceHolderNode(// number of shells                         (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_shelldataadr ; )
PlaceHolderNode(    )
PlaceHolderNode(// first shell data address                 (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_evpairadr ; )
PlaceHolderNode(       )
PlaceHolderNode(// first evpair address                     (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_evpairnum ; )
PlaceHolderNode(       )
PlaceHolderNode(// number of evpairs                        (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_texcoordadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// address in flex_texcoord ;  -1: none       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_vertbodyid ; )
PlaceHolderNode(      )
PlaceHolderNode(// vertex body ids                          (nflexvert x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_edge ; )
PlaceHolderNode(            )
PlaceHolderNode(// edge vertex ids (2 per edge)             (nflexedge x 2) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elem ; )
PlaceHolderNode(            )
PlaceHolderNode(// element vertex ids (dim+1 per elem)      (nflexelemdata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemedge ; )
PlaceHolderNode(        )
PlaceHolderNode(// element edge ids                         (nflexelemedge x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_elemlayer ; )
PlaceHolderNode(       )
PlaceHolderNode(// element distance from surface ,  3D only   (nflexelem x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_shell ; )
PlaceHolderNode(           )
PlaceHolderNode(// shell fragment vertex ids (dim per frag) (nflexshelldata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_evpair ; )
PlaceHolderNode(          )
PlaceHolderNode(// (element ,  vertex) collision pairs        (nflexevpair x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_vert ; )
PlaceHolderNode(            )
PlaceHolderNode(// vertex positions in local body frames    (nflexvert x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_xvert0 ; )
PlaceHolderNode(          )
PlaceHolderNode(// Cartesian vertex positions in qpos0      (nflexvert x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flexedge_length0 ; )
PlaceHolderNode(     )
PlaceHolderNode(// edge lengths in qpos0                    (nflexedge x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flexedge_invweight0 ; )
PlaceHolderNode(  )
PlaceHolderNode(// edge inv. weight in qpos0                (nflexedge x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_radius ; )
PlaceHolderNode(          )
PlaceHolderNode(// radius around primitive element          (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_stiffness ; )
PlaceHolderNode(       )
PlaceHolderNode(// finite element stiffness matrix          (nflexelem x 21) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_damping ; )
PlaceHolderNode(         )
PlaceHolderNode(// Rayleigh's damping coefficient           (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_edgestiffness ; )
PlaceHolderNode(   )
PlaceHolderNode(// edge stiffness                           (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   flex_edgedamping ; )
PlaceHolderNode(     )
PlaceHolderNode(// edge damping                             (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flex_edgeequality ; )
PlaceHolderNode(    )
PlaceHolderNode(// is edge equality constraint defined      (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flex_rigid ; )
PlaceHolderNode(           )
PlaceHolderNode(// are all verices in the same body         (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flexedge_rigid ; )
PlaceHolderNode(       )
PlaceHolderNode(// are both edge vertices in same body      (nflexedge x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flex_centered ; )
PlaceHolderNode(        )
PlaceHolderNode(// are all vertex coordinates (0 , 0 , 0)       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  flex_flatskin ; )
PlaceHolderNode(        )
PlaceHolderNode(// render flex skin with flat shading       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_bvhadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// address of bvh root ;  -1: no bvh          (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      flex_bvhnum ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of bounding volumes               (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    flex_rgba ; )
PlaceHolderNode(            )
PlaceHolderNode(// rgba when material is omitted            (nflex x 4) )
PlaceHolderNode(  )
PlaceHolderNode(float*    flex_texcoord ; )
PlaceHolderNode(        )
PlaceHolderNode(// vertex texture coordinates               (nflextexcoord x 2) )
PlaceHolderNode( 
  )
PlaceHolderNode(// meshes )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_vertadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first vertex address                     (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_vertnum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of vertices                       (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_faceadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first face address                       (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_facenum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of faces                          (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_bvhadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// address of bvh root                      (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_bvhnum ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of bvh                            (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_normaladr ; )
PlaceHolderNode(       )
PlaceHolderNode(// first normal address                     (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_normalnum ; )
PlaceHolderNode(       )
PlaceHolderNode(// number of normals                        (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_texcoordadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// texcoord data address ;  -1: no texcoord   (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_texcoordnum ; )
PlaceHolderNode(     )
PlaceHolderNode(// number of texcoord                       (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_graphadr ; )
PlaceHolderNode(        )
PlaceHolderNode(// graph data address ;  -1: no graph         (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mesh_vert ; )
PlaceHolderNode(            )
PlaceHolderNode(// vertex positions for all meshes          (nmeshvert x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mesh_normal ; )
PlaceHolderNode(          )
PlaceHolderNode(// normals for all meshes                   (nmeshnormal x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mesh_texcoord ; )
PlaceHolderNode(        )
PlaceHolderNode(// vertex texcoords for all meshes          (nmeshtexcoord x 2) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_face ; )
PlaceHolderNode(            )
PlaceHolderNode(// vertex face data                         (nmeshface x 3) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_facenormal ; )
PlaceHolderNode(      )
PlaceHolderNode(// normal face data                         (nmeshface x 3) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_facetexcoord ; )
PlaceHolderNode(    )
PlaceHolderNode(// texture face data                        (nmeshface x 3) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_graph ; )
PlaceHolderNode(           )
PlaceHolderNode(// convex graph data                        (nmeshgraph x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   mesh_scale ; )
PlaceHolderNode(           )
PlaceHolderNode(// scaling applied to asset vertices        (nmesh x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   mesh_pos ; )
PlaceHolderNode(             )
PlaceHolderNode(// translation applied to asset vertices    (nmesh x 3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   mesh_quat ; )
PlaceHolderNode(            )
PlaceHolderNode(// rotation applied to asset vertices       (nmesh x 4) )
PlaceHolderNode(  )
PlaceHolderNode(int*      mesh_pathadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// address of asset path for mesh ;  -1: none (nmesh x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// skins )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_matid ; )
PlaceHolderNode(           )
PlaceHolderNode(// skin material id ;  -1: none               (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_group ; )
PlaceHolderNode(           )
PlaceHolderNode(// group for visibility                     (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_rgba ; )
PlaceHolderNode(            )
PlaceHolderNode(// skin rgba                                (nskin x 4) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_inflate ; )
PlaceHolderNode(         )
PlaceHolderNode(// inflate skin in normal direction         (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_vertadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first vertex address                     (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_vertnum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of vertices                       (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_texcoordadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// texcoord data address ;  -1: no texcoord   (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_faceadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first face address                       (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_facenum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of faces                          (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_boneadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// first bone in skin                       (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_bonenum ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of bones in skin                  (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_vert ; )
PlaceHolderNode(            )
PlaceHolderNode(// vertex positions for all skin meshes     (nskinvert x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_texcoord ; )
PlaceHolderNode(        )
PlaceHolderNode(// vertex texcoords for all skin meshes     (nskintexvert x 2) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_face ; )
PlaceHolderNode(            )
PlaceHolderNode(// triangle faces for all skin meshes       (nskinface x 3) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_bonevertadr ; )
PlaceHolderNode(     )
PlaceHolderNode(// first vertex in each bone                (nskinbone x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_bonevertnum ; )
PlaceHolderNode(     )
PlaceHolderNode(// number of vertices in each bone          (nskinbone x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_bonebindpos ; )
PlaceHolderNode(     )
PlaceHolderNode(// bind pos of each bone                    (nskinbone x 3) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_bonebindquat ; )
PlaceHolderNode(    )
PlaceHolderNode(// bind quat of each bone                   (nskinbone x 4) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_bonebodyid ; )
PlaceHolderNode(      )
PlaceHolderNode(// body id of each bone                     (nskinbone x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_bonevertid ; )
PlaceHolderNode(      )
PlaceHolderNode(// mesh ids of vertices in each bone        (nskinbonevert x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    skin_bonevertweight ; )
PlaceHolderNode(  )
PlaceHolderNode(// weights of vertices in each bone         (nskinbonevert x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      skin_pathadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// address of asset path for skin ;  -1: none (nskin x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// height fields )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   hfield_size ; )
PlaceHolderNode(          )
PlaceHolderNode(// (x ,  y ,  z_top ,  z_bottom)                  (nhfield x 4) )
PlaceHolderNode(  )
PlaceHolderNode(int*      hfield_nrow ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of rows in grid                   (nhfield x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      hfield_ncol ; )
PlaceHolderNode(          )
PlaceHolderNode(// number of columns in grid                (nhfield x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      hfield_adr ; )
PlaceHolderNode(           )
PlaceHolderNode(// address in hfield_data                   (nhfield x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    hfield_data ; )
PlaceHolderNode(          )
PlaceHolderNode(// elevation data                           (nhfielddata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      hfield_pathadr ; )
PlaceHolderNode(       )
PlaceHolderNode(// address of hfield asset path ;  -1: none   (nhfield x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// textures )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_type ; )
PlaceHolderNode(             )
PlaceHolderNode(// texture type (mjtTexture)                (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_height ; )
PlaceHolderNode(           )
PlaceHolderNode(// number of rows in texture image          (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_width ; )
PlaceHolderNode(            )
PlaceHolderNode(// number of columns in texture image       (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_nchannel ; )
PlaceHolderNode(         )
PlaceHolderNode(// number of channels in texture image      (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_adr ; )
PlaceHolderNode(              )
PlaceHolderNode(// start address in tex_data                (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  tex_data ; )
PlaceHolderNode(             )
PlaceHolderNode(// pixel values                             (ntexdata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tex_pathadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// address of texture asset path ;  -1: none  (ntex x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// materials )
PlaceHolderNode(  )
PlaceHolderNode(int*      mat_texid ; )
PlaceHolderNode(            )
PlaceHolderNode(// indices of textures ;  -1: none            (nmat x mjNTEXROLE) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  mat_texuniform ; )
PlaceHolderNode(       )
PlaceHolderNode(// make texture cube uniform                (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_texrepeat ; )
PlaceHolderNode(        )
PlaceHolderNode(// texture repetition for 2d mapping        (nmat x 2) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_emission ; )
PlaceHolderNode(         )
PlaceHolderNode(// emission (x rgb)                         (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_specular ; )
PlaceHolderNode(         )
PlaceHolderNode(// specular (x white)                       (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_shininess ; )
PlaceHolderNode(        )
PlaceHolderNode(// shininess coef                           (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_reflectance ; )
PlaceHolderNode(      )
PlaceHolderNode(// reflectance (0: disable)                 (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_metallic ; )
PlaceHolderNode(         )
PlaceHolderNode(// metallic coef                            (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_roughness ; )
PlaceHolderNode(        )
PlaceHolderNode(// roughness coef                           (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(float*    mat_rgba ; )
PlaceHolderNode(             )
PlaceHolderNode(// rgba                                     (nmat x 4) )
PlaceHolderNode( 
  )
PlaceHolderNode(// predefined geom pairs for collision detection ;  has precedence over exclude )
PlaceHolderNode(  )
PlaceHolderNode(int*      pair_dim ; )
PlaceHolderNode(             )
PlaceHolderNode(// contact dimensionality                   (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      pair_geom1 ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of geom1                              (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      pair_geom2 ; )
PlaceHolderNode(           )
PlaceHolderNode(// id of geom2                              (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      pair_signature ; )
PlaceHolderNode(       )
PlaceHolderNode(// body1 << 16 + body2                      (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_solref ; )
PlaceHolderNode(          )
PlaceHolderNode(// solver reference: contact normal         (npair x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_solreffriction ; )
PlaceHolderNode(  )
PlaceHolderNode(// solver reference: contact friction       (npair x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_solimp ; )
PlaceHolderNode(          )
PlaceHolderNode(// solver impedance: contact                (npair x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_margin ; )
PlaceHolderNode(          )
PlaceHolderNode(// detect contact if dist<margin            (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_gap ; )
PlaceHolderNode(             )
PlaceHolderNode(// include in solver if dist<margin-gap     (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   pair_friction ; )
PlaceHolderNode(        )
PlaceHolderNode(// tangent1 ,  2 ,  spin ,  roll1 ,  2              (npair x 5) )
PlaceHolderNode( 
  )
PlaceHolderNode(// excluded body pairs for collision detection )
PlaceHolderNode(  )
PlaceHolderNode(int*      exclude_signature ; )
PlaceHolderNode(    )
PlaceHolderNode(// body1 << 16 + body2                      (nexclude x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// equality constraints )
PlaceHolderNode(  )
PlaceHolderNode(int*      eq_type ; )
PlaceHolderNode(              )
PlaceHolderNode(// constraint type (mjtEq)                  (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      eq_obj1id ; )
PlaceHolderNode(            )
PlaceHolderNode(// id of object 1                           (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      eq_obj2id ; )
PlaceHolderNode(            )
PlaceHolderNode(// id of object 2                           (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      eq_objtype ; )
PlaceHolderNode(           )
PlaceHolderNode(// type of both objects (mjtObj)            (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  eq_active0 ; )
PlaceHolderNode(           )
PlaceHolderNode(// initial enable/disable constraint state  (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   eq_solref ; )
PlaceHolderNode(            )
PlaceHolderNode(// constraint solver reference              (neq x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   eq_solimp ; )
PlaceHolderNode(            )
PlaceHolderNode(// constraint solver impedance              (neq x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   eq_data ; )
PlaceHolderNode(              )
PlaceHolderNode(// numeric data for constraint              (neq x mjNEQDATA) )
PlaceHolderNode( 
  )
PlaceHolderNode(// tendons )
PlaceHolderNode(  )
PlaceHolderNode(int*      tendon_adr ; )
PlaceHolderNode(           )
PlaceHolderNode(// address of first object in tendon's path (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tendon_num ; )
PlaceHolderNode(           )
PlaceHolderNode(// number of objects in tendon's path       (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tendon_matid ; )
PlaceHolderNode(         )
PlaceHolderNode(// material id for rendering                (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tendon_group ; )
PlaceHolderNode(         )
PlaceHolderNode(// group for visibility                     (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  tendon_limited ; )
PlaceHolderNode(       )
PlaceHolderNode(// does tendon have length limits           (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_width ; )
PlaceHolderNode(         )
PlaceHolderNode(// width for rendering                      (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_solref_lim ; )
PlaceHolderNode(    )
PlaceHolderNode(// constraint solver reference: limit       (ntendon x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_solimp_lim ; )
PlaceHolderNode(    )
PlaceHolderNode(// constraint solver impedance: limit       (ntendon x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_solref_fri ; )
PlaceHolderNode(    )
PlaceHolderNode(// constraint solver reference: friction    (ntendon x mjNREF) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_solimp_fri ; )
PlaceHolderNode(    )
PlaceHolderNode(// constraint solver impedance: friction    (ntendon x mjNIMP) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_range ; )
PlaceHolderNode(         )
PlaceHolderNode(// tendon length limits                     (ntendon x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_margin ; )
PlaceHolderNode(        )
PlaceHolderNode(// min distance for limit detection         (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_stiffness ; )
PlaceHolderNode(     )
PlaceHolderNode(// stiffness coefficient                    (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_damping ; )
PlaceHolderNode(       )
PlaceHolderNode(// damping coefficient                      (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_frictionloss ; )
PlaceHolderNode(  )
PlaceHolderNode(// loss due to friction                     (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_lengthspring ; )
PlaceHolderNode(  )
PlaceHolderNode(// spring resting length range              (ntendon x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_length0 ; )
PlaceHolderNode(       )
PlaceHolderNode(// tendon length in qpos0                   (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_invweight0 ; )
PlaceHolderNode(    )
PlaceHolderNode(// inv. weight in qpos0                     (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tendon_user ; )
PlaceHolderNode(          )
PlaceHolderNode(// user data                                (ntendon x nuser_tendon) )
PlaceHolderNode(  )
PlaceHolderNode(float*    tendon_rgba ; )
PlaceHolderNode(          )
PlaceHolderNode(// rgba when material is omitted            (ntendon x 4) )
PlaceHolderNode( 
  )
PlaceHolderNode(// list of all wrap objects in tendon paths )
PlaceHolderNode(  )
PlaceHolderNode(int*      wrap_type ; )
PlaceHolderNode(            )
PlaceHolderNode(// wrap object type (mjtWrap)               (nwrap x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      wrap_objid ; )
PlaceHolderNode(           )
PlaceHolderNode(// object id: geom ,  site ,  joint             (nwrap x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   wrap_prm ; )
PlaceHolderNode(             )
PlaceHolderNode(// divisor ,  joint coef ,  or site id          (nwrap x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// actuators )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_trntype ; )
PlaceHolderNode(     )
PlaceHolderNode(// transmission type (mjtTrn)               (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_dyntype ; )
PlaceHolderNode(     )
PlaceHolderNode(// dynamics type (mjtDyn)                   (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_gaintype ; )
PlaceHolderNode(    )
PlaceHolderNode(// gain type (mjtGain)                      (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_biastype ; )
PlaceHolderNode(    )
PlaceHolderNode(// bias type (mjtBias)                      (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_trnid ; )
PlaceHolderNode(       )
PlaceHolderNode(// transmission id: joint ,  tendon ,  site     (nu x 2) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_actadr ; )
PlaceHolderNode(      )
PlaceHolderNode(// first activation address ;  -1: stateless  (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_actnum ; )
PlaceHolderNode(      )
PlaceHolderNode(// number of activation variables           (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_group ; )
PlaceHolderNode(       )
PlaceHolderNode(// group for visibility                     (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  actuator_ctrllimited ; )
PlaceHolderNode( )
PlaceHolderNode(// is control limited                       (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  actuator_forcelimited ; )
PlaceHolderNode(// is force limited                         (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  actuator_actlimited ; )
PlaceHolderNode(  )
PlaceHolderNode(// is activation limited                    (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_dynprm ; )
PlaceHolderNode(      )
PlaceHolderNode(// dynamics parameters                      (nu x mjNDYN) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_gainprm ; )
PlaceHolderNode(     )
PlaceHolderNode(// gain parameters                          (nu x mjNGAIN) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_biasprm ; )
PlaceHolderNode(     )
PlaceHolderNode(// bias parameters                          (nu x mjNBIAS) )
PlaceHolderNode(  )
PlaceHolderNode(mjtByte*  actuator_actearly ; )
PlaceHolderNode(    )
PlaceHolderNode(// step activation before force             (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_ctrlrange ; )
PlaceHolderNode(   )
PlaceHolderNode(// range of controls                        (nu x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_forcerange ; )
PlaceHolderNode(  )
PlaceHolderNode(// range of forces                          (nu x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_actrange ; )
PlaceHolderNode(    )
PlaceHolderNode(// range of activations                     (nu x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_gear ; )
PlaceHolderNode(        )
PlaceHolderNode(// scale length and transmitted force       (nu x 6) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_cranklength ; )
PlaceHolderNode( )
PlaceHolderNode(// crank length for slider-crank            (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_acc0 ; )
PlaceHolderNode(        )
PlaceHolderNode(// acceleration from unit force in qpos0    (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_length0 ; )
PlaceHolderNode(     )
PlaceHolderNode(// actuator length in qpos0                 (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_lengthrange ; )
PlaceHolderNode( )
PlaceHolderNode(// feasible actuator length range           (nu x 2) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   actuator_user ; )
PlaceHolderNode(        )
PlaceHolderNode(// user data                                (nu x nuser_actuator) )
PlaceHolderNode(  )
PlaceHolderNode(int*      actuator_plugin ; )
PlaceHolderNode(      )
PlaceHolderNode(// plugin instance id ;  -1: not a plugin     (nu x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// sensors )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_type ; )
PlaceHolderNode(          )
PlaceHolderNode(// sensor type (mjtSensor)                  (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_datatype ; )
PlaceHolderNode(      )
PlaceHolderNode(// numeric data type (mjtDataType)          (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_needstage ; )
PlaceHolderNode(     )
PlaceHolderNode(// required compute stage (mjtStage)        (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_objtype ; )
PlaceHolderNode(       )
PlaceHolderNode(// type of sensorized object (mjtObj)       (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_objid ; )
PlaceHolderNode(         )
PlaceHolderNode(// id of sensorized object                  (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_reftype ; )
PlaceHolderNode(       )
PlaceHolderNode(// type of reference frame (mjtObj)         (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_refid ; )
PlaceHolderNode(         )
PlaceHolderNode(// id of reference frame ;  -1: global frame  (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_dim ; )
PlaceHolderNode(           )
PlaceHolderNode(// number of scalar outputs                 (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_adr ; )
PlaceHolderNode(           )
PlaceHolderNode(// address in sensor array                  (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   sensor_cutoff ; )
PlaceHolderNode(        )
PlaceHolderNode(// cutoff for real and positive ;  0: ignore  (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   sensor_noise ; )
PlaceHolderNode(         )
PlaceHolderNode(// noise standard deviation                 (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   sensor_user ; )
PlaceHolderNode(          )
PlaceHolderNode(// user data                                (nsensor x nuser_sensor) )
PlaceHolderNode(  )
PlaceHolderNode(int*      sensor_plugin ; )
PlaceHolderNode(        )
PlaceHolderNode(// plugin instance id ;  -1: not a plugin     (nsensor x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// plugin instances )
PlaceHolderNode(  )
PlaceHolderNode(int*      plugin ; )
PlaceHolderNode(               )
PlaceHolderNode(// globally registered plugin slot number   (nplugin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      plugin_stateadr ; )
PlaceHolderNode(      )
PlaceHolderNode(// address in the plugin state array        (nplugin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      plugin_statenum ; )
PlaceHolderNode(      )
PlaceHolderNode(// number of states in the plugin instance  (nplugin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(char*     plugin_attr ; )
PlaceHolderNode(          )
PlaceHolderNode(// config attributes of plugin instances    (npluginattr x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      plugin_attradr ; )
PlaceHolderNode(       )
PlaceHolderNode(// address to each instance's config attrib (nplugin x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// custom numeric fields )
PlaceHolderNode(  )
PlaceHolderNode(int*      numeric_adr ; )
PlaceHolderNode(          )
PlaceHolderNode(// address of field in numeric_data         (nnumeric x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      numeric_size ; )
PlaceHolderNode(         )
PlaceHolderNode(// size of numeric field                    (nnumeric x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   numeric_data ; )
PlaceHolderNode(         )
PlaceHolderNode(// array of all numeric fields              (nnumericdata x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// custom text fields )
PlaceHolderNode(  )
PlaceHolderNode(int*      text_adr ; )
PlaceHolderNode(             )
PlaceHolderNode(// address of text in text_data             (ntext x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      text_size ; )
PlaceHolderNode(            )
PlaceHolderNode(// size of text field (strlen+1)            (ntext x 1) )
PlaceHolderNode(  )
PlaceHolderNode(char*     text_data ; )
PlaceHolderNode(            )
PlaceHolderNode(// array of all text fields (0-terminated)  (ntextdata x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// custom tuple fields )
PlaceHolderNode(  )
PlaceHolderNode(int*      tuple_adr ; )
PlaceHolderNode(            )
PlaceHolderNode(// address of text in text_data             (ntuple x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tuple_size ; )
PlaceHolderNode(           )
PlaceHolderNode(// number of objects in tuple               (ntuple x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tuple_objtype ; )
PlaceHolderNode(        )
PlaceHolderNode(// array of object types in all tuples      (ntupledata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      tuple_objid ; )
PlaceHolderNode(          )
PlaceHolderNode(// array of object ids in all tuples        (ntupledata x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   tuple_objprm ; )
PlaceHolderNode(         )
PlaceHolderNode(// array of object params in all tuples     (ntupledata x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// keyframes )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_time ; )
PlaceHolderNode(             )
PlaceHolderNode(// key time                                 (nkey x 1) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_qpos ; )
PlaceHolderNode(             )
PlaceHolderNode(// key position                             (nkey x nq) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_qvel ; )
PlaceHolderNode(             )
PlaceHolderNode(// key velocity                             (nkey x nv) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_act ; )
PlaceHolderNode(              )
PlaceHolderNode(// key activation                           (nkey x na) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_mpos ; )
PlaceHolderNode(             )
PlaceHolderNode(// key mocap position                       (nkey x nmocap*3) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_mquat ; )
PlaceHolderNode(            )
PlaceHolderNode(// key mocap quaternion                     (nkey x nmocap*4) )
PlaceHolderNode(  )
PlaceHolderNode(mjtNum*   key_ctrl ; )
PlaceHolderNode(             )
PlaceHolderNode(// key control                              (nkey x nu) )
PlaceHolderNode( 
  )
PlaceHolderNode(// names )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_bodyadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// body name pointers                       (nbody x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_jntadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// joint name pointers                      (njnt x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_geomadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// geom name pointers                       (ngeom x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_siteadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// site name pointers                       (nsite x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_camadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// camera name pointers                     (ncam x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_lightadr ; )
PlaceHolderNode(        )
PlaceHolderNode(// light name pointers                      (nlight x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_flexadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// flex name pointers                       (nflex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_meshadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// mesh name pointers                       (nmesh x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_skinadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// skin name pointers                       (nskin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_hfieldadr ; )
PlaceHolderNode(       )
PlaceHolderNode(// hfield name pointers                     (nhfield x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_texadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// texture name pointers                    (ntex x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_matadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// material name pointers                   (nmat x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_pairadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// geom pair name pointers                  (npair x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_excludeadr ; )
PlaceHolderNode(      )
PlaceHolderNode(// exclude name pointers                    (nexclude x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_eqadr ; )
PlaceHolderNode(           )
PlaceHolderNode(// equality constraint name pointers        (neq x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_tendonadr ; )
PlaceHolderNode(       )
PlaceHolderNode(// tendon name pointers                     (ntendon x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_actuatoradr ; )
PlaceHolderNode(     )
PlaceHolderNode(// actuator name pointers                   (nu x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_sensoradr ; )
PlaceHolderNode(       )
PlaceHolderNode(// sensor name pointers                     (nsensor x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_numericadr ; )
PlaceHolderNode(      )
PlaceHolderNode(// numeric name pointers                    (nnumeric x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_textadr ; )
PlaceHolderNode(         )
PlaceHolderNode(// text name pointers                       (ntext x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_tupleadr ; )
PlaceHolderNode(        )
PlaceHolderNode(// tuple name pointers                      (ntuple x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_keyadr ; )
PlaceHolderNode(          )
PlaceHolderNode(// keyframe name pointers                   (nkey x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      name_pluginadr ; )
PlaceHolderNode(       )
PlaceHolderNode(// plugin instance name pointers            (nplugin x 1) )
PlaceHolderNode(  )
PlaceHolderNode(char*     names ; )
PlaceHolderNode(                )
PlaceHolderNode(// names of all objects ,  0-terminated       (nnames x 1) )
PlaceHolderNode(  )
PlaceHolderNode(int*      names_map ; )
PlaceHolderNode(            )
PlaceHolderNode(// internal hash map of names               (nnames_map x 1) )
PlaceHolderNode( 
  )
PlaceHolderNode(// paths )
PlaceHolderNode(  )
PlaceHolderNode(char*     paths ; )
PlaceHolderNode(                )
PlaceHolderNode(// paths to assets ,  0-terminated            (npaths x 1) )
PlaceHolderNode( )
PlaceHolderNode(typedef <children> mjModel ; )
PlaceHolderNode(struct mjModel_ )
PlaceHolderNode(mjModel )
PlaceHolderNode( 
 )
PlaceHolderNode(#endif )
PlaceHolderNode( )
PlaceHolderNode(// MUJOCO_MJMODEL_H_ )
PlaceHolderNode( )
