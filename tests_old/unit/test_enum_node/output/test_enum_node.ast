RootNode(c_current_idx=0, c_child_idxs=(1, 2, 3, 8, 9, ...) len=19)
	SingleLineCommentNode(c_parent_idx=0, c_current_idx=1)
	// Basic enum with values

	EnumNode(c_parent_idx=0, c_current_idx=3, c_child_idxs=(4), node_state=4 (COMPLETED), name='Color')
	enum Color
	ScopeNode(c_parent_idx=3, c_current_idx=4, c_child_idxs=(5, 6, 7), node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{
	
		EnumFieldNode(c_parent_idx=4, c_current_idx=5, node_state=4 (COMPLETED), field_name='RED', value='0')
		RED  =  0 ,

		EnumFieldNode(c_parent_idx=4, c_current_idx=6, node_state=4 (COMPLETED), field_name='GREEN', value='1')
		GREEN  =  1 ,

		EnumFieldNode(c_parent_idx=4, c_current_idx=7, node_state=4 (COMPLETED), field_name='BLUE', value='2')
		BLUE  =  2 
};

	SingleLineCommentNode(c_parent_idx=0, c_current_idx=8)
	// Enum with auto-incrementing values

	EnumNode(c_parent_idx=0, c_current_idx=10, c_child_idxs=(11), node_state=4 (COMPLETED), name='Direction')
	enum Direction
	ScopeNode(c_parent_idx=10, c_current_idx=11, c_child_idxs=(12, 13, 14, 15, 16, ...) len=8, node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{
	
		EnumFieldNode(c_parent_idx=11, c_current_idx=12, node_state=4 (COMPLETED), field_name='NORTH')
		NORTH ,

		SingleLineCommentNode(c_parent_idx=11, c_current_idx=13)
		// 0

		EnumFieldNode(c_parent_idx=11, c_current_idx=14, node_state=4 (COMPLETED), field_name='SOUTH')
		SOUTH ,

		SingleLineCommentNode(c_parent_idx=11, c_current_idx=15)
		// 1

		EnumFieldNode(c_parent_idx=11, c_current_idx=16, node_state=4 (COMPLETED), field_name='EAST')
		EAST ,

		SingleLineCommentNode(c_parent_idx=11, c_current_idx=17)
		// 2

		EnumFieldNode(c_parent_idx=11, c_current_idx=18, node_state=4 (COMPLETED), field_name='WEST')
		WEST   

		SingleLineCommentNode(c_parent_idx=11, c_current_idx=19)
		// 3
};

	SingleLineCommentNode(c_parent_idx=0, c_current_idx=20)
	// Enum with mixed explicit and implicit values

	EnumNode(c_parent_idx=0, c_current_idx=22, c_child_idxs=(23), node_state=4 (COMPLETED), name='Status')
	enum Status
	ScopeNode(c_parent_idx=22, c_current_idx=23, c_child_idxs=(24, 25, 26, 27, 28, ...) len=7, node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{
	
		EnumFieldNode(c_parent_idx=23, c_current_idx=24, node_state=4 (COMPLETED), field_name='OK', value='200')
		OK  =  200 ,

		EnumFieldNode(c_parent_idx=23, c_current_idx=25, node_state=4 (COMPLETED), field_name='NOT_FOUND', value='404')
		NOT_FOUND  =  404 ,

		EnumFieldNode(c_parent_idx=23, c_current_idx=26, node_state=4 (COMPLETED), field_name='SERVER_ERROR', value='500')
		SERVER_ERROR  =  500 ,

		EnumFieldNode(c_parent_idx=23, c_current_idx=27, node_state=4 (COMPLETED), field_name='UNAVAILABLE')
		UNAVAILABLE ,

		SingleLineCommentNode(c_parent_idx=23, c_current_idx=28)
		// 501

		EnumFieldNode(c_parent_idx=23, c_current_idx=29, node_state=4 (COMPLETED), field_name='TIMEOUT')
		TIMEOUT     

		SingleLineCommentNode(c_parent_idx=23, c_current_idx=30)
		// 502
};

	SingleLineCommentNode(c_parent_idx=0, c_current_idx=31)
	// Enum with name but no values  ( empty enum ) 

	EnumNode(c_parent_idx=0, c_current_idx=33, c_child_idxs=(34), node_state=4 (COMPLETED), name='Empty')
	enum Empty
	ScopeNode(c_parent_idx=33, c_current_idx=34, node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{};

	SingleLineCommentNode(c_parent_idx=0, c_current_idx=35)
	// Enum with hex values and comments

	EnumNode(c_parent_idx=0, c_current_idx=37, c_child_idxs=(38), node_state=4 (COMPLETED), name='Flags')
	enum Flags
	ScopeNode(c_parent_idx=37, c_current_idx=38, c_child_idxs=(39, 40, 41, 42, 43, 44), node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{
	
		EnumFieldNode(c_parent_idx=38, c_current_idx=39, node_state=4 (COMPLETED), field_name='READ', value='0x01')
		READ     =  0x01 ,

		SingleLineCommentNode(c_parent_idx=38, c_current_idx=40)
		// Read permission

		EnumFieldNode(c_parent_idx=38, c_current_idx=41, node_state=4 (COMPLETED), field_name='WRITE', value='0x02')
		WRITE    =  0x02 ,

		SingleLineCommentNode(c_parent_idx=38, c_current_idx=42)
		// Write permission

		EnumFieldNode(c_parent_idx=38, c_current_idx=43, node_state=4 (COMPLETED), field_name='EXECUTE', value='0x04')
		EXECUTE  =  0x04  

		SingleLineCommentNode(c_parent_idx=38, c_current_idx=44)
		// Execute permission
};

	SingleLineCommentNode(c_parent_idx=0, c_current_idx=45)
	// Enum with byte values

	EnumNode(c_parent_idx=0, c_current_idx=47, c_child_idxs=(48), node_state=4 (COMPLETED), name='ByteValues')
	enum ByteValues
	ScopeNode(c_parent_idx=47, c_current_idx=48, c_child_idxs=(49, 50, 51, 52), node_state=4 (COMPLETED), n_tokens=1, n_tokens_tail=1, parent_type='EnumNode')
	{
	
		EnumFieldNode(c_parent_idx=48, c_current_idx=49, node_state=4 (COMPLETED), field_name='BYTE_0', value='1<<0')
		BYTE_0  =  1 << 0 ,

		EnumFieldNode(c_parent_idx=48, c_current_idx=50, node_state=4 (COMPLETED), field_name='BYTE_1', value='1<<1')
		BYTE_1  =  1 << 1 ,

		EnumFieldNode(c_parent_idx=48, c_current_idx=51, node_state=4 (COMPLETED), field_name='BYTE_2', value='1<<2')
		BYTE_2  =  1 << 2 ,

		EnumFieldNode(c_parent_idx=48, c_current_idx=52, node_state=4 (COMPLETED), field_name='BYTE_3', value='1<<3')
		BYTE_3  =  1 << 3 
};

	EndFileNode(c_parent_idx=0, c_current_idx=53)
	C_BINDER_MOJO_END_FILE